<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Aaron's Blog</title><link>https://www.aaronheld.com/categories/python/</link><description>Recent content in python on Aaron's Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sat, 02 Apr 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aaronheld.com/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Using python-dulwich to load any version of a file from a local git repo</title><link>https://www.aaronheld.com/post/using-python-dulwich-to-load-any-version-of-a-file-from-a-local-git-repo/</link><pubDate>Sat, 02 Apr 2011 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/using-python-dulwich-to-load-any-version-of-a-file-from-a-local-git-repo/</guid><description>
&lt;p>On Monday we are kicking off an innovation week (more to come on that topic) and I've devised a little project that includes nearly every buzzword I'm interested in.&lt;/p>
&lt;p>I'm spending some time doing some technical spikes to see what is possible and I found a need to load a particular file from a git repo given the path and tree hash.&lt;/p>
&lt;p>I grabbed my trusty python, dulwich (native python-git library) and gave it a shot. After a few minutes writing complicated looking recursive code I jumped over to irc where the friendly author pointed me to a convenience function that does what I needed.&lt;/p>
&lt;p>Here is the short answer:&lt;/p>
&lt;p>from dulwich.repo import Repo
from dulwich.object_store import tree_lookup_path&lt;/p>
&lt;p>r = Repo('/Documents/projects/gitdep/rails')
def get_file(tree, path):
(mode,sha) = tree_lookup_path(r.get_object,tree,path)
return r[sha].data&lt;/p>
&lt;p>tree = '7e7331fce169bbe1d6be71a30c1e1f7ab2e6ceba'
path = 'activemodel/examples/validations.rb'&lt;/p>
&lt;p>print get_file(tree,path)&lt;/p>
&lt;p>This gives me a rails validation file from last year. Nothing special about this file, I just find the rails git repo an interesting playground for git experimentation.&lt;/p></description></item><item><title>OSX vs Ubuntu, Windows wins?</title><link>https://www.aaronheld.com/post/osx-vs-ubuntu-windows-wins/</link><pubDate>Sun, 02 Jan 2011 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/osx-vs-ubuntu-windows-wins/</guid><description>
&lt;p>Ever since Barcamp I've been shopping for a personal laptop for general use as well as a development machine that I could use for work.  Our work issued machine is a loaded mac powerbook.  With a unix core osx has given me much of the power that I used to enjoy when I'd used linux as a primary os. However Apple is not doing wonders for free software and I felt the need to get back to my roots and move back to Linux.&lt;/p>
&lt;p>I picked up a 4lb HP &lt;a href="http://www.shopping.hp.com/webapp/shopping/computer_can_series.do?storeName=computer_store&amp;amp;category=notebooks&amp;amp;a1=Category&amp;amp;v1=Ultra-Portable&amp;amp;series_name=dm4t_series&amp;amp;jumpid=in_R329_prodexp/hhoslp/psg/notebooks/Ultra-Portable/dm4t_series">DM4&lt;/a> and dual booted to Ubuntu with not issues.  The trackpad didn't work right, but a script off someones blog made it work reasonably ok.  A quick hop into debug mode showed that the drivers returned negative x-y coordinates when you use 2 fingers.  I downloaded the open source drivers to take a look at the code and saw that a patch was already in head.&lt;/p>
&lt;p>Developing was a joy and eclipse opened nearly instantly.&lt;/p>
&lt;p>Microsoft silverlight DRM is not (yet?) ported to linux so I dual boot to windows 7 to get the customer experience and use CIM products.  A funny thing happened to me while getting the 'customer' experience.   I liked it!   Windows 7 is much more usable then either osx or Linux and IE9 looks like it will be a really powerful platform for future development.&lt;/p>
&lt;p>Around this time I picked up a python update on OSX and spent about 4 hours trying to get mysql and python to &lt;a href="http://www.google.com/search?q=mysql+python+osx">talk to each other&lt;/a>.  I booted into windows and thought about how to use this platform as a development machine.&lt;/p>
&lt;p>Enter &lt;a href="http://bitnami.org/">BitNami&lt;/a>. Rather then deal with version conflicts I grabbed a virtual machine that is close to my target server and installed VMware Player.  Mapping a windows directory to the virtual machine lets me edit files in native windows while running my build chain on Linux.  The browser I use for development is finally the same browser used by the majority of my customers and my dev environment is much closer to my server environment as well.&lt;/p>
&lt;p>For not I'm working through the rough edges of this setup and trying to find a decent windows SSH client but this setup seems to have legs.&lt;/p></description></item><item><title>SpringSource - proving once again Java doesn't get the web</title><link>https://www.aaronheld.com/post/springsource-proving-once-again-java-doesnt-get-the-web/</link><pubDate>Thu, 01 May 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/springsource-proving-once-again-java-doesnt-get-the-web/</guid><description>
&lt;p>I just read an article in a java trade mag entitled: &lt;a href="http://java.sys-con.com/read/557307.htm" title="Syscon on Java">SpringSource CEO: &amp;quot;The Future of Enterprise Java is Clear and Bright&amp;quot;&lt;/a>&lt;/p>
&lt;p>The premise sounds positive.  Basically they took OSGI, Spring and threw it on Tomcat as a web server.  The idea of being able to deploy OSGI bundles with the bag of beans development style of Spring is really compelling.&lt;/p>
&lt;p>What this negative post is about is how they still don't get the 'web'.  My biggest issue with Java web development is that not enough attention is paid to modern web basics.  The very first thing that I noticed on the SpringSource website was the 15 year old style url.&lt;/p>
&lt;p>&lt;a href="http://www.springsource.com/web/guest/home">http://www.springsource.com/web/guest/home&lt;/a>&lt;/p>
&lt;p>what is with the /web/guest/home for the homepage?  That is really bad SEO mojo&lt;/p>
&lt;p>The idea of bundles that you can drop in for added functionality is fantastic, but you hit an ugly query string laden url like:&lt;/p>
&lt;p>&lt;a href="http://www.springsource.com/repository/app/library/version/detail?name=org.apache.myfaces&amp;amp;version=1.2.2">http://www.springsource.com/repository/app/library/version/detail?name=org.apache.myfaces&amp;amp;version=1.2.2&lt;/a>&lt;/p>
&lt;p>as opposed to the far more buzzword complient library of plugins for something like django:&lt;/p>
&lt;p>&lt;a href="http://djangoplugables.com/projects/django-compress/">http://djangoplugables.com/projects/django-compress/&lt;/a>&lt;/p>
&lt;p>While the Java page shows you the really easy lines of Maven xml to paste into your pom, the python based django system talks about the usefulness of the actual bundle you are looking at.&lt;/p>
&lt;p>And compare the old school search page of:&lt;/p>
&lt;p>&lt;a href="http://www.springsource.com/repository/app/search">http://www.springsource.com/repository/app/search&lt;/a>&lt;/p>
&lt;p>to the happiness of a large input box with realtime results on:&lt;/p>
&lt;p>&lt;a href="http://djangoplugables.com/repositories/">http://djangoplugables.com/repositories/&lt;/a> At least this is better then the time I read the Jython website and was greeted by a 'blink' tag&lt;/p></description></item><item><title>Rest as a boring servlet</title><link>https://www.aaronheld.com/post/rest-as-a-boring-servlet/</link><pubDate>Tue, 22 Apr 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/rest-as-a-boring-servlet/</guid><description>
&lt;p>A coworker whipped up a generic REST interface for any Ruby on Rails activerecord (data model).  What he described (in 5 minutes) was a nice implementation.  I wanted see how the generic django REST interface was coded.&lt;/p>
&lt;p>&lt;a href="http://code.google.com/p/django-rest-interface/">http://code.google.com/p/django-rest-interface/&lt;/a>&lt;/p>
&lt;p>I was pleasantly surprised to realize that they Python developers simply used the normal form processing to handle rest and didn't invent a new paradigm.&lt;/p>
&lt;p>On an early project we tried to implement RESTlet for a java based REST application.  Under load we saw some strange problems and the code was reverted to normal servlets without too much pain.&lt;/p>
&lt;p>The beauty of REST is its simplicity, yet there is so much energy being expended to 'simplify' it.&lt;/p>
&lt;p>The real magic is to standardize on sending XML or JSON rather then url encoded data of an http form POST.&lt;/p></description></item><item><title>Motocycles and Python turn toil into joy</title><link>https://www.aaronheld.com/post/motocycles-and-python-turn-toil-into-joy/</link><pubDate>Sat, 19 Apr 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/motocycles-and-python-turn-toil-into-joy/</guid><description>
&lt;p>So today started out great.&lt;/p>
&lt;p>Temperatures in the 80's, so I took the kiddies outside. I put my cellphone on the trunk of my sisters's car, put the kids on their bikes, put skates on my feet and rolled out to enjoy the day.&lt;/p>
&lt;p>Things were going well with my littlest one making turns at each end of the block. My sister pulled up and shouted some encouragement as she drove past. I waved and noticed my black cell phone on the white trunk of her car!&lt;/p>
&lt;p>I started to skate hard, but I couldn't leave my girl in the street. I shuffled the girls back into the house and summoned the boy to watch them and tore off after my sister. I searched all the likely routes she would have taken but could not find it.&lt;/p>
&lt;p>I called her and found out where she went and was determined to look again.&lt;/p>
&lt;p>At this point I was pretty upset about this and feeling down.&lt;/p>
&lt;p>So I got on my motorcycle and started looking for it. I rode a block at a time and dismounted to look. After about 15 minutes I realized it was looking pretty grim. I also realized I was out on my bike on a beautiful day, and any day you ride simply isn't that bad.&lt;/p>
&lt;p>I had a similar occurrence with python the other day. I had to scrape some data out of a nasty, IE only, webapp. It was pretty ugly but I got into writing the app as a pyunit test case and using assertions to ensure I got all the data. The difficult nature of the data coming in made me appreciate just how much you can do with test cases. The scraping task was about as pleasurable as looking for my cellphone across town.&lt;/p>
&lt;p>But at least I got to do it in python and enjoy the ride!&lt;/p></description></item><item><title>csv to xml via python</title><link>https://www.aaronheld.com/post/cvs-to-xml-python/</link><pubDate>Tue, 15 Apr 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/cvs-to-xml-python/</guid><description>
&lt;p>Today at work our &lt;a href="http://arpitonline.com">main Flash developer&lt;/a> asked me about expanding his skills and learning either Ruby or Python. My personal preference is towards python but ruby has its place. Flash is really doing well in the Java/Enterprise space lately so I went that way.&lt;/p>
&lt;p>Most of the Flash backend in our work is xml based so XML was on my mind anyway. Recently we needed to mock up a xml data data file for a project while the real APIs are being completed. We had the data in a csv file so we asked some developers to whip up a xml file.&lt;/p>
&lt;p>As I started writing up the ticket I started thinking it would be easier to just do it myself.&lt;/p>
&lt;p>Given the speed of python development I was right!.&lt;/p>
&lt;p>#!/usr/bin/env python
&amp;quot;&amp;quot;&amp;quot;
cvs2xml.py&lt;/p>
&lt;p>Created by Aaron Held on 2008-04-11.
Make the xml from the csv using dom and other three letter acronyms
&amp;quot;&amp;quot;&amp;quot;import sys,os
import unittes
import csv&lt;/p>
&lt;p>from pprint import pprint
import xml.etree.ElementTree as ET&lt;/p>
&lt;p>class Cvs2xml:
def loadCSV(self):
&amp;quot;&amp;quot;&amp;quot;Load the data and return a list of maps&amp;quot;&amp;quot;&amp;quot;
reader = csv.DictReader(open(r&amp;quot;input.csv&amp;quot;,'r'))
rows = []
for row in reader:
rows.append(row)
return rows&lt;/p>
&lt;p>def mappings(self):
&amp;quot;&amp;quot;&amp;quot;
Map csv file to xml field names
&amp;quot;&amp;quot;&amp;quot;
mapping = { 'id':&amp;quot;store_number&amp;quot;
return mapping&lt;/p>
&lt;p>def createXML(self,listofrows):
&amp;quot;&amp;quot;&amp;quot;Turn lists into xml
&amp;quot;&amp;quot;&amp;quot;
root = ET.Element(&amp;quot;stores&amp;quot;)
for row in listofrows:
store = ET.SubElement(root, &amp;quot;store&amp;quot;)
for xml_field in row.keys():
csv_field = self.mappings().get(xml_field,xml_field)
ET.SubElement(store, xml_field).text = row.get(csv_field,&amp;quot;&amp;quot;)
print(ET.tostring(root))
#tree = ET.ElementTree(root)
#tree.write(&amp;quot;output.xml&amp;quot;)&lt;/p>
&lt;p>class Cvs2xmlTests(unittest.TestCase):
def setUp(self):
pass&lt;/p>
&lt;p>def testRun(self):
'''Lazy way of main()'''
cvs2xml = Cvs2xml()
rows = cvs2xml.loadCSV()
cvs2xml.createXML(rows)&lt;/p>
&lt;p>if __name__ == '__main__':
unittest.main()&lt;/p></description></item></channel></rss>