<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on Aaron's Blog</title><link>https://www.aaronheld.com/categories/code/</link><description>Recent content in code on Aaron's Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sun, 14 Jul 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aaronheld.com/categories/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Reading Exchange Mail with Java</title><link>https://www.aaronheld.com/post/reading-exchange-mail-with-java/</link><pubDate>Sun, 14 Jul 2013 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/reading-exchange-mail-with-java/</guid><description>
&lt;p>Many times I've had to sweep an inbox and do something with the email. Typically the easiest way is to use IMAP, but our corporate email server has IMAP disabled.&lt;/p>
&lt;p>Fortunately 2007 Microsoft Exchange has had a rich web service interface so I wanted to give that a try.&lt;/p>
&lt;p>One of the main patterns used is to read an email and then move it to something like an 'archive' or 'error' directory. Exchange supports arbitrary message properties such as 'category' and even custom properties, so adding a category tag of &amp;quot;processed&amp;quot; seems like a good idea. I wanted to experiment a bit.&lt;/p>
&lt;p>Some googling turned up a java API and seems 'lightly' supported. I had little luck finding any examples for just reading email. &lt;a href="http://archive.msdn.microsoft.com/ewsjavaapi">http://archive.msdn.microsoft.com/ewsjavaapi&lt;/a>&lt;/p>
&lt;p>I decided to check out the .NET library to see if that would shed some light on how to use the Java API - and it did. &lt;a href="http://msdn.microsoft.com/en-us/library/dd633710(v=exchg.80).aspx">http://msdn.microsoft.com/en-us/library/dd633710(v=exchg.80).aspx&lt;/a>&lt;/p>
&lt;p>and found the 2 APIs are very similar. By writing some samples in c# I was able to quickly port them into Java and something like this should work for you.&lt;/p>
&lt;p>[gist id=&amp;quot;5995611&amp;quot;]&lt;/p>
&lt;p>You do have to download the Microsoft .jar and a few dependencies to get this working. I'm posting this because I could not find this type of simple example.&lt;/p>
&lt;p>tip: If you are unsure of the API domain endpoint look for the wsdl at https://EXCHANGE_API_DOMAIN/EWS/Services.wsdl&lt;/p></description></item><item><title>Practical Hypermedia for our post ORM world</title><link>https://www.aaronheld.com/post/practical-hypermedia/</link><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/practical-hypermedia/</guid><description>
&lt;p>This post is for people who have started learning about hypermedia and feel that it over complicates the elegance of REST. When I started hearing about hypermedia I felt it was adding architecture acrobatics for the sake of buzzword enhancement. After having applied these techniques in a few places not only have a drunk the cool aid, I've setup a stand beside my desk. I look back and try to understand where my initial negative reaction came from. I realized that many of the examples were trivial and did not demonstrate the reality of what hypermedia brings to the table.&lt;/p>
&lt;p>The main epiphany I'd like to share is that REST has proven itself as the best way to take an ORM focused approach to an API and Hypermedia is proving itself as the best way to take a business process approach to an API.&lt;/p>
&lt;p>A key aspect of Hypermedia that I don’t see used often enough is the notion of a template. The template portion of the spec calls for the API to send down to the client the parameters necessary to call the API itself. This notion is akin to how you load a web page with a blank form and then submit the form directly. You don’t post to twitter by typing a bunch of stuff into the url, you load twitter first and then fill in a textarea.&lt;/p>
&lt;p>Essentially in my early experiments I was writing XML api payloads where the template portion was basically an HTML form that the client could decompose and render. The problem that I felt was that I was basically writing a full old school web application that happened to send XML rather than HTML back to the client. Then my client had extra complexity in parsing the XML and implementing all the UX rules to get the client looking and feeling right. I also had to build 2 webapps that both were basically doing the same thing, view, validation and calling a service.&lt;/p>
&lt;p>Now lets take a look at doing this for real using AngularJS, JSON and a deadline.&lt;/p>
&lt;p>The business case: Our sales team has access to a report of customer service change activity. Current use cases include a simple sales report to show and total the usage of a sales rep's customers on a monthly basis.&lt;/p>
&lt;p>An initial implementation focusing around the orm simply used Linq against Entity Framework to retrieve the data from a MSSQL database.&lt;/p>
&lt;p>Before we can generate the report we need to present an input form to the user. The design calls for a &amp;quot;Sales Rep&amp;quot; drop down list which will allow us to report on activity by sales rep. In an ORM world generating this drop down is easy enough, throw up a few classes against the employees table, query based on role, and render that to HTML on the server.&lt;/p>
&lt;p>In our razor/asp/whatever template there is some code along the lines of:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% foreach rep in salesreps %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;span class="ln">3&lt;/span>&amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy!&lt;/p>
&lt;p>Next iteration we are asked to restrict reports such that a rep can only see their own customers, but the sales manager can see all customers.&lt;/p>
&lt;p>Now the code looks something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% if User.hasRole(Roles.SALESMGR) %&amp;gt;
&lt;span class="ln">3&lt;/span> &amp;lt;% foreach rep in salesreps %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;span class="ln">4&lt;/span> &amp;lt;% else %&amp;gt;
&lt;span class="ln">5&lt;/span> &amp;lt;option value=&amp;#34;&amp;lt;%=User.id%&amp;gt;&amp;#34;&amp;gt;User.Name&amp;lt;/option&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ok so this could be refactored along the lines of&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% foreach rep in salesreps\_Based\_on\_Role %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The relevant point here is that the salesrep list restrictions must be handled in the view based on this use case.&lt;/p>
&lt;p>Once that work is done we need to generate the report data itself. Building a restful endpoint for this sounds like a good idea and is an incremental effort for a reusable data source. Most people (including myself) would build out that restful endpoint and use it to generate the data. Maybe put some logic in the server side controller that will parse the HTML submission form, apply security, and they make the restful call.&lt;/p>
&lt;p>This restful approach could be a generic &amp;quot;SalesRep’ list endpoint and move the filtering logic there. Since we also need a list of sales reps for things like &amp;quot;forwarding a customer’ that new end point would need to know how it is going to be used before it is called. So the CONTEXT of how the API is called matters. Unfortunately in a stateless world the API call does not have the context unless it is given a hint by the client.&lt;/p>
&lt;p>Additionally we need to implement this logic against the report generation as well, otherwise anyone could modify the http request and generate a report for a salesrep against our business requirements. The linq query (psudocode) could look like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>//find all the records
&lt;span class="ln">2&lt;/span>IEnumerable&amp;lt;ServiceChanges&amp;gt; servicechanges =
&lt;span class="ln">3&lt;/span> from records in recordsORM
&lt;span class="ln">4&lt;/span> select record where SalesRep = {0};
&lt;span class="ln">5&lt;/span>// and filter based on role
&lt;span class="ln">6&lt;/span>if !User.rolein(Roles.SALESMGR) {
&lt;span class="ln">7&lt;/span> servicechanges = servicechanges.Where(records.salesrep.id = {0},User.id);
&lt;span class="ln">8&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our orm world, even if we we create restful services such as &amp;quot;/api/servicechanges/’ and &amp;quot;/api/salesrep/’ we still have two bits of unrelated code that need to be kept in sync. The view is ultimately coupled to the api call.&lt;/p>
&lt;p>The ORM layer has now served to couple the database directly to the view. dropdowns are created against the salesreps_Based_on_Role object which is coupled to the employee tables and sprikled with business logic for every view it may be called for. Not a very reusable pattern simply because it is called by the client WITHOUT THE CONTEXT of how it will be used.&lt;/p>
&lt;p>Older developers will remember the good old stateful days of foxbase and objectpal where these use cases would be trivial. Just implement row level security into the table and your salesrep list is a view such as:&lt;/p>
&lt;p>reportview = select * from serivceactivity join salesrep.id in ALLOWED_IDS_BASED_ON_ROLE&lt;/p>
&lt;p>then you bind a drop-down list to &amp;quot;select distinct salesrep.id from reportview&amp;quot;&lt;/p>
&lt;p>this antiquated approach has the benefit of both the form construction as well as the report generation being based off the sames business rules - row level restrictions. Sometimes I miss the stateful, context rich, execution environment of an old school desktop application.&lt;/p>
&lt;h3 id="hypermedia-approach">Hypermedia approach&lt;/h3>
&lt;p>How does hypermedia lend itself to a cleaner solution?&lt;/p>
&lt;p>It brings context back to the conversation by preserving the state at the API level.&lt;/p>
&lt;p>This is what HATEOS &lt;a href="http://en.wikipedia.org/wiki/HATEOAS">http://en.wikipedia.org/wiki/HATEOAS&lt;/a> , Hypermedia As an Engine Of State, means.&lt;/p>
&lt;p>A key tenet of hypermedia is that the client does not need any prior knowledge in order to make the api call. This is where common sense needs to balance reality. I don’t expect to build a magic client that can do anything, but within the scope of a particular problem domain we can limit the need of the client to make multiple calls in order to &amp;quot;setup’ the parameters necessary.&lt;/p>
&lt;p>In the example of the sales rep situation, our client still need to make a call to the server before calling the api. In this case however it calls the /salesrep/ service itself and retrieves the hypermedia template. (yes this is akin to WSDL, if WSDL was easier to understand and extensible). When the server side code is calling for the list of salesreps for the client to render it has the context of how the data will be called, as well as the knowing the user/role based security model to operate under.&lt;/p>
&lt;p>Our hypermedia design is based on a combination of JSON+collection media type as published by Mike Amundsen &lt;a href="http://www.amundsen.com/media-types/collection/">http://www.amundsen.com/media-types/collection/&lt;/a> blended with what we have experienced using the indispensable JIRA api &lt;a href="http://docs.atlassian.com/jira/REST/latest/">http://docs.atlassian.com/jira/REST/latest/&lt;/a>.&lt;/p>
&lt;p>JSON+collection calls for a query template. This query template is where the api will describe to the client how to make a query or find data.&lt;/p>
&lt;p>In my case it looks something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>&amp;#34;queries&amp;#34; : \[{
&lt;span class="ln"> 2&lt;/span> &amp;#34;href&amp;#34; : &amp;#34;/api/saleslog/search&amp;#34;,
&lt;span class="ln"> 3&lt;/span> &amp;#34;rel&amp;#34; : &amp;#34;search&amp;#34;,
&lt;span class="ln"> 4&lt;/span> &amp;#34;data&amp;#34; : \[
&lt;span class="ln"> 5&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;startDate&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;date&amp;#34;, &amp;#34;prompt&amp;#34;:&amp;#34;Start date for report&amp;#34;},
&lt;span class="ln"> 6&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;endDate&amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;date&amp;#34;, &amp;#34;prompt&amp;#34;:&amp;#34;End date for report&amp;#34;},
&lt;span class="ln"> 7&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;salesrep&amp;#34;,
&lt;span class="ln"> 8&lt;/span> &amp;#34;type&amp;#34;:&amp;#34;select&amp;#34;,
&lt;span class="ln"> 9&lt;/span> &amp;#34;required&amp;#34;: true,
&lt;span class="ln">10&lt;/span> &amp;#34;options&amp;#34;:\[
&lt;span class="ln">11&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;B. Hartnell&amp;#34;, value:1},
&lt;span class="ln">12&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;J. Pertwee&amp;#34;, value:3},
&lt;span class="ln">13&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;P Troughton&amp;#34;, value:2},
&lt;span class="ln">14&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;T Baker&amp;#34;, value:4},
&lt;span class="ln">15&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;D Tennant&amp;#34;, value:10}
&lt;span class="ln">16&lt;/span> \]
&lt;span class="ln">17&lt;/span> }
&lt;span class="ln">18&lt;/span> \]
&lt;span class="ln">19&lt;/span> }\]
&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;p>To render that into a form using angular was remarkably easy:&lt;/p>
&lt;p>&lt;a href="http://fiddle.jshell.net/aaronheld/kQ8K3/" title="Fiddle this">http://fiddle.jshell.net/aaronheld/kQ8K3/&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://angularjs.org/">Angularjs&lt;/a> allows me to bind the client side state to the API and handles keeping the DOM and view in sync with the model.  More on that later (hint: synergy!)&lt;/p>
&lt;p>The fun part being that the client does not have to know anything about the security concerns around &amp;quot;salesRep’. The way that the drop down is rendered is something along the lines of&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span> &amp;lt;select ng:switch-when=&amp;#34;select&amp;#34; ng:model=&amp;#34;field.value&amp;#34; &amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;option ng:repeat=&amp;#34;option in field.options&amp;#34; value=&amp;#34;{{option.value}}&amp;#34;&amp;gt;{{option.name}}&amp;lt;/option&amp;gt;
&lt;span class="ln">3&lt;/span> &amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can google for some robust form builder implementations but with a good template representation they do not seem necessary for my needs. &lt;a href="http://007design.com/formular/index.html">http://007design.com/formular/index.html&lt;/a> was the inspiration for this approach.&lt;/p>
&lt;p>the final step is almost anticlimactic, for the client to render the drop down with security all that has to happen is that the API sends back a salesRep list with one option.&lt;/p>
&lt;p>From here I feel that we have an agile design. With suitable testing we have a confident implementation. So far all of the iterative updates have felt easy. Yesterday we were discussing changing the UX so that if there is one option we don’t render a select box (since there is no selection). In that case we simply change the angular form logic in the browser, where UX view logic belongs. Security changes and additional query logic is based in the server/API where it belongs.&lt;/p>
&lt;p>Next I’ll write up how we return the row items of the report and leverage hypermedia links to allow the client to perform operations on items based on business rules.&lt;/p>
&lt;p>This will all lead up to demonstrating how this an API first approach (rather then object model based design) will allow me to replace all of the search/list/operate work queues in my enterprise with a consistent pattern and greatly simplified software stack.&lt;/p>
&lt;p>If you are in Philly this November I'm thinking about a code walkthough at &lt;a href="http://2012.barcampphilly.org/">http://2012.barcampphilly.org/&lt;/a> See you there!&lt;/p></description></item><item><title>JIRA story point totals using Ruby and Rest</title><link>https://www.aaronheld.com/post/jira-story-point-totals-using-ruby-and-rest/</link><pubDate>Tue, 12 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/jira-story-point-totals-using-ruby-and-rest/</guid><description>
&lt;p>I'm using a hosted version of JIRA and needed to obtain quick totals based on filters that I have setup.&lt;/p>
&lt;p>I could not find any easy documentation online so I thought I'd share my quick hack.&lt;/p>
&lt;p>The &lt;a href="https://developer.atlassian.com/display/JIRADEV/JIRA+REST+API+Example+-+Query+issues">REST API is very well documented&lt;/a> and uses the same JQL as the filters do.&lt;/p>
&lt;p>In order to view the commit list for an iteration I have some JQL that looks like:&lt;/p>
&lt;p>fixversion = 20120611 and fixversion was 20120611 ON &amp;quot;2012/06/11&amp;quot; AND status NOT IN (canceled, &amp;quot;on hold&amp;quot;)&lt;/p>
&lt;p>In order to feed that into the API I needed to construct a url along the lines of&lt;/p>
&lt;pre>&lt;code>https://**********.atlassian.net/rest/api/2/search?jql=#{urlencoded JQL string}&amp;amp;fields=customfield\_10003&amp;amp;maxresults=400
&lt;/code>&lt;/pre>
&lt;p>The &amp;amp;fields=customfield_10003 instruct the API to return a minimal fieldlist and only include that custom field, which for me is Story Points.  By default the API will return 50, so bump that to 400 to be safe.&lt;/p>
&lt;p>The Ruby code looks like&lt;/p>
&lt;pre>&lt;code>def getData(api,qs=&amp;quot;&amp;quot;)
url = &amp;quot;https://energyplus.atlassian.net/rest/api/2/#{api}?#{qs}&amp;quot;
res = open(url,
&amp;quot;Authorization&amp;quot; =&amp;gt; &amp;quot;Basic &amp;quot; + 
Base64.strict\_encode64(USERNAME:PASSWORD)) {|f|
JSON.parse(f.read)
})
&lt;/code>&lt;/pre>
&lt;p>Calling that function I use something along the lines of&lt;/p>
&lt;pre>&lt;code>result =  getData(&amp;quot;search&amp;quot;, &amp;quot;jql=&amp;quot; + URI::encode(jql + '&amp;amp;fields=customfield\_10003&amp;amp;maxResults=400'))
&lt;/code>&lt;/pre>
&lt;p>The final step is to loop through all the results and sum the 'Story Point' values&lt;/p>
&lt;pre>&lt;code>puts &amp;quot;Total: &amp;quot; + res\[&amp;quot;issues&amp;quot;\].inject(0){|sum, item| sum + item\[&amp;quot;fields&amp;quot;\]\[&amp;quot;customfield\_10003&amp;quot;\]}.to\_s
&lt;/code>&lt;/pre>
&lt;p>If you are having issues with the SSL cert, try adding&lt;/p>
&lt;pre>&lt;code>OpenSSL::SSL::VERIFY\_PEER = OpenSSL::SSL::VERIFY\_NONE
&lt;/code>&lt;/pre>
&lt;p>Here is my actual script in its undocumented glory: &lt;a href="https://gist.github.com/2919437">https://gist.github.com/2919437&lt;/a>&lt;/p>
&lt;p>If you think you can improve it, drop me a note - I'm hiring ;)&lt;/p></description></item><item><title>Using python-dulwich to load any version of a file from a local git repo</title><link>https://www.aaronheld.com/post/using-python-dulwich-to-load-any-version-of-a-file-from-a-local-git-repo/</link><pubDate>Sat, 02 Apr 2011 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/using-python-dulwich-to-load-any-version-of-a-file-from-a-local-git-repo/</guid><description>
&lt;p>On Monday we are kicking off an innovation week (more to come on that topic) and I've devised a little project that includes nearly every buzzword I'm interested in.&lt;/p>
&lt;p>I'm spending some time doing some technical spikes to see what is possible and I found a need to load a particular file from a git repo given the path and tree hash.&lt;/p>
&lt;p>I grabbed my trusty python, dulwich (native python-git library) and gave it a shot. After a few minutes writing complicated looking recursive code I jumped over to irc where the friendly author pointed me to a convenience function that does what I needed.&lt;/p>
&lt;p>Here is the short answer:&lt;/p>
&lt;p>from dulwich.repo import Repo
from dulwich.object_store import tree_lookup_path&lt;/p>
&lt;p>r = Repo('/Documents/projects/gitdep/rails')
def get_file(tree, path):
(mode,sha) = tree_lookup_path(r.get_object,tree,path)
return r[sha].data&lt;/p>
&lt;p>tree = '7e7331fce169bbe1d6be71a30c1e1f7ab2e6ceba'
path = 'activemodel/examples/validations.rb'&lt;/p>
&lt;p>print get_file(tree,path)&lt;/p>
&lt;p>This gives me a rails validation file from last year. Nothing special about this file, I just find the rails git repo an interesting playground for git experimentation.&lt;/p></description></item><item><title>OSX vs Ubuntu, Windows wins?</title><link>https://www.aaronheld.com/post/osx-vs-ubuntu-windows-wins/</link><pubDate>Sun, 02 Jan 2011 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/osx-vs-ubuntu-windows-wins/</guid><description>
&lt;p>Ever since Barcamp I've been shopping for a personal laptop for general use as well as a development machine that I could use for work.  Our work issued machine is a loaded mac powerbook.  With a unix core osx has given me much of the power that I used to enjoy when I'd used linux as a primary os. However Apple is not doing wonders for free software and I felt the need to get back to my roots and move back to Linux.&lt;/p>
&lt;p>I picked up a 4lb HP &lt;a href="http://www.shopping.hp.com/webapp/shopping/computer_can_series.do?storeName=computer_store&amp;amp;category=notebooks&amp;amp;a1=Category&amp;amp;v1=Ultra-Portable&amp;amp;series_name=dm4t_series&amp;amp;jumpid=in_R329_prodexp/hhoslp/psg/notebooks/Ultra-Portable/dm4t_series">DM4&lt;/a> and dual booted to Ubuntu with not issues.  The trackpad didn't work right, but a script off someones blog made it work reasonably ok.  A quick hop into debug mode showed that the drivers returned negative x-y coordinates when you use 2 fingers.  I downloaded the open source drivers to take a look at the code and saw that a patch was already in head.&lt;/p>
&lt;p>Developing was a joy and eclipse opened nearly instantly.&lt;/p>
&lt;p>Microsoft silverlight DRM is not (yet?) ported to linux so I dual boot to windows 7 to get the customer experience and use CIM products.  A funny thing happened to me while getting the 'customer' experience.   I liked it!   Windows 7 is much more usable then either osx or Linux and IE9 looks like it will be a really powerful platform for future development.&lt;/p>
&lt;p>Around this time I picked up a python update on OSX and spent about 4 hours trying to get mysql and python to &lt;a href="http://www.google.com/search?q=mysql+python+osx">talk to each other&lt;/a>.  I booted into windows and thought about how to use this platform as a development machine.&lt;/p>
&lt;p>Enter &lt;a href="http://bitnami.org/">BitNami&lt;/a>. Rather then deal with version conflicts I grabbed a virtual machine that is close to my target server and installed VMware Player.  Mapping a windows directory to the virtual machine lets me edit files in native windows while running my build chain on Linux.  The browser I use for development is finally the same browser used by the majority of my customers and my dev environment is much closer to my server environment as well.&lt;/p>
&lt;p>For not I'm working through the rough edges of this setup and trying to find a decent windows SSH client but this setup seems to have legs.&lt;/p></description></item><item><title>my Barcamp Philly 2010 summary</title><link>https://www.aaronheld.com/post/my-barcamp-philly-2010-summary/</link><pubDate>Sun, 14 Nov 2010 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/my-barcamp-philly-2010-summary/</guid><description>
&lt;p>Every year &lt;a href="http://www.barcampphilly.org/">Philly's BarCarmp&lt;/a> gets better.  Last year I met great people and learned new tactics from my peers.  This year I enjoyed a number of roundtable discussions where we taught each other and had my core paradigms challenged.  (of couse still met great people, but that is implied)&lt;/p>
&lt;p>The day opened last night with a fantastic hosted party &lt;a href="http://www.indyhall.org/" title="Indy Hally - coworking Philadelphia">@indyhall&lt;/a>.  It had a vibe that reminded me of my college days where the future was bright and everyone you talked to has excitement around what they were doing.  I loved being surprised by people.  Even the kids from &lt;a href="http://phillymagic.com/">Phillymagic&lt;/a> had more going on then I would have thought.  First off the magician was a &lt;a href="http://www.rpi.edu/">Rensselar&lt;/a> student and I was saddened to learn the bars I institutionalized as a student were no longer in vogue.  More importantly he was not just flipping cards for pay, he is building out an online hub for magicians to fill a market need that he noticed.  I'm barely through my first tequila and completely impressed by this fellows accomplishments in building a passive income stream is a business he loves.&lt;/p>
&lt;p>There were another half dozen similar occurrences that night and I could tell all the stories.  One of them being that I met the &amp;quot;Best storyteller in Philadelphia&amp;quot; and learned that &lt;a href="http://www.firstpersonarts.org/programs2/storyslams/">StorySlams&lt;/a> happen around the corner from my house.  My wife Jen tells a great story and I'm looking forward to coercing her to get in there and compete.&lt;/p>
&lt;p>Innovation, entrepreneuring, passion, community - good start!&lt;/p>
&lt;p>The next morning saw me walked up Broad street at 730am to help unload a car and get setup.  I was listening to music and passed a colleague heading south.  Checking my phone's walking GPS I realized I was not lost, he was just early and meandering about.  Little did he know there was heavy lifting to be done and in true barcamp fashion he did not hesitate to roll up his sleeves and help us out.  I thought that there might be a shortage of people in the early AM and there were actually plenty of bodies.  A good start.&lt;/p>
&lt;p>It is hard to keep saying how the day kept getting better, but even the act of mindlessly stuffing badges was fun.  The debate about giving extra or fewer 'dot' votes to sponsors was hilarious and socially relevant at the same time.  When you want to lead a talk at barcamp you simply put a card up on the wall.  If you want to attend a talk you put a 'dot' sticker on it.  The organizers use the sticker to determine what size room to put the talk into, it is not a vote.  Everyone gets to talk if you have a card up.  A common misconception around this was that cards with fewer stickers would not be attended.  It is like voting in that most people have decided in their heads what talk to go to but don't bother walking up to 'vote'.  But that is another topic.  It is safe to say I didn't see any bare cards and I've never seen an empty room.&lt;/p>
&lt;p>Interlude for carafes of old city coffee, overflowing platters of bagels and jams and baskets of fresh fruit.  No pretentious croissants, just honest local philly goodness.&lt;/p>
&lt;p>For the first session my wife listened to &lt;a href="http://lessaccounting.com/">LessAccounting&lt;/a>'s &lt;a href="http://twitter.com/stevenbristol">Steve&lt;/a> for the topic of Making Money.  She is a &lt;a href="http://www.amazon.com/gp/product/0061161640?ie=UTF8&amp;amp;tag=aarhel-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0061161640">Terry Pratchett&lt;/a> fan.  I'm looking forward to her dad's take on their offering.&lt;/p>
&lt;p>Personally I went for the VIm talk by &lt;a href="http://twitter.com/trevmex">Trevor&lt;/a>.  I'm a big VIm fan and recovering Java IDE addict.  Yes I went down the dark road where I relied on IDEs to generate pages of boilerplate code that locked my development into that particular IDE.  I even skipped reading the documentation of third party code and just let intellisense autocompletion help me muddle through.  Moving back to VI forced to to really understand the code and look for the elegance that comes with refactoring around concise code.  Additionally since I partner VIM with command line processing I can use the same toolchain on dev, qa and CI without much fuss.&lt;/p>
&lt;p>Also modal editing rocks.  Fingers stay on the home keys and regex navigation makes pages of code seem to grow on the page rather then being written top down.  Most of the people there had at least dabbled with VI and we shared some great tips.&lt;/p>
&lt;p>More importantly I'm not alone in thinking VIm breeds productivity and automation.&lt;/p>
&lt;p>And most importantly for my not so secret agenda VIm runs on Linux, Windows and Mac.&lt;/p>
&lt;p>More on that later, stay tunned for &lt;a href="https://www.aaronheld.com/post/barcamp-philly-2010-summary-opendata-and-beyond">part II&lt;/a> - &lt;a href="http://twitter.com/opendataphilly">Open Data Philly&lt;/a>!&lt;/p></description></item><item><title>Designing a new Infrastructure is like buying a new car</title><link>https://www.aaronheld.com/post/designing-infrastructure-buying-car/</link><pubDate>Wed, 17 Jun 2009 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/designing-infrastructure-buying-car/</guid><description>
&lt;p>Because I happen to be both buying a new car and deploying new infrastructure the realization dawned upon me about how similar these two activities are.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>You start the investigation with some preconceived &amp;quot;gut-level&amp;quot; notions. code: Multiprocess distributed job engine is what I need car : I want a Mazda 3 with &amp;quot;Zoom Zoom&amp;quot;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everybody has a story about why your choice is bad code: &amp;quot;In my last job I used a python-C++ wrapper from vcron&amp;quot; car : My cousin&amp;quot;s friends brother had a mazda and the engine fell out on 95&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everybody loves what they have (but its not for you) code: Our feed system rocks, oh but we don&amp;quot;t pull in news every minute car : I love my Civic, oh but I don&amp;quot;t have 3 kids where one of them is 6&amp;quot;2&amp;quot;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everybody thinks what you currently have is no good code: &amp;quot;Your cache middleware is no good because it can&amp;quot;t run jobs&amp;quot;&amp;quot; car :  &amp;quot;Dude, you can&amp;quot;t drive a Camry and date girls&amp;quot;&amp;quot; (true comment post-divorce)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>** &lt;strong>You usually start this process due to a crash&lt;/strong> **&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>code: User gen data + no cache eviction = FAIL car : SUV from the side + swerve = One less Stop sign.&lt;/p>
&lt;p>So my investigation has started and it is taking interesting twists.   We pull in a weather feed via a RESTish api and the vendor would like us to FTP a large data file instead.  This is clearly a good fit for a multiprocess job engine so that project has kicked off for real.  I&amp;quot;m looking at one of the top open source systems &amp;quot;Job Scheduler&amp;quot;&amp;quot; because that fit all my critericode:  It can spread jobs across multiple machines and give operations some command and control of background systems.  Our ops team is really good at the command line / Solaris thing so having our systems look more like shell scripts and less like java interface implementations will help. I did a good amount of research and made sure that this app was solaris friendly and patted myself on the back for caring about my ops team.  Just the other day I find out that the solaris binary is sparc only and we plan on running this on Solaris/x86.  First threat to my guy choice has manifested.&lt;/p>
&lt;p>On the car front I went to reedman-toll and took the Mazda 3 (stick shift) around their test track with my daughter.  The car was a fun to drive but second gear took me from 5-25mph.  That will be awesome when I&amp;quot;m stuck in traffic (and pissed that I bought a manual rather then an automatic) but limited my sense of control over the gearing.  The point of a stick is to feel that &amp;quot;snick-snick&amp;quot; as you upshift around S curves and downshift into corners. In short there was no &amp;quot;Zoom-Zoom&amp;quot;&lt;/p>
&lt;p>In my youth I would have just deployed my first choice (one day I should blog about when I thought it was a good idea to build a custom accounting program) and bought a car based on first impressions.&lt;/p>
&lt;p>Now that I have less disposable income and more oversight on my engineering decisions am wiser I&amp;quot;ll take some time to really focus on what the needs are.&lt;/p>
&lt;p>I&amp;quot;ll blog more on this later, but I have to work on my project plan for the Alfresco based CMS.&lt;/p>
&lt;p>That was a good choice - Open source, Java, active community - &amp;quot;Zoom Zoom&amp;quot;..&lt;/p></description></item><item><title>Peeling back the onion of stupidity</title><link>https://www.aaronheld.com/post/peeling-back-the-onion-of-stupidity/</link><pubDate>Thu, 07 May 2009 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/peeling-back-the-onion-of-stupidity/</guid><description>
&lt;p>I've mentioned the book &lt;a href="http://www.amazon.com/gp/product/0932633676?ie=UTF8&amp;amp;tag=aarhel-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0932633676">Adrenaline Junkies&lt;/a>&lt;img src="http://www.assoc-amazon.com/e/ir?t=aarhel-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0932633676" alt=""> in a previous post and I'm not seeing the value in a common language for discussing problems.&lt;/p>
&lt;p>Today's pattern is the 'Onion of Stupidity'.  This is a common pattern where you build up hack upon workaround upon compromise, inject a little shortsightedness and wind up seeing a good chunk of your effort goes into cleaning it up.  A &lt;a href="http://codeartisan.blogspot.com/" title="Jon Moore's blog">colleague&lt;/a> here promoted the term &amp;quot;technical debt&amp;quot; to describe issues were we these types of issues and help us prioritize them.  I'm thinking that my Onion is more about 'strategy debt'.  The onion is usually built with best intentions at all sides.&lt;/p>
&lt;p>Peeling back the layers of stupidity is tedious and takes time, but cutting through it makes everyone in the room cry.&lt;/p>
&lt;p>I'm sure we have all been here.  I had 2 instances of it today at work, and one with an old friend.  He wanted me to update some joomla modules and I said yes.  I go to ssh and wget the files and find out there is no ssh.  Without that I have to download the files, extract then and upload lots of little ones.  Then I find that some of the original files are edited so the have to be diffed.  Now I have to download the files and diff them.  Then I want to check but can't run it without the database.  I just restored my local ubuntu image and don't yet have MySQL. So I go to install MySQL and don't have connectivity yet between the VirtualBox and osx....&lt;/p>
&lt;p>So the first layer of this Onion that I must peel is to fix Bridged Ethernet.  Or I cut the darn thing and move the site to a real hosting company.&lt;/p>
&lt;p>So while I'm pretty much out of luck on my personal life here at my day job we all got together with a commitment to peel back our layers of issues as a team and focus on building out a solid foundation.  Hopefully the only onions we will have are the ones served on the sliders upstairs.....&lt;/p></description></item><item><title>coupling de-coupled CMS</title><link>https://www.aaronheld.com/post/coupling-de-coupled-cms/</link><pubDate>Mon, 27 Apr 2009 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/coupling-de-coupled-cms/</guid><description>
&lt;p>I'm hip deep in the design of a new CMS to power some large scale sites. The big buzzword going on at this level is around how the CMS products are designed to be 'de-coupled'. Specifically we are talking about decoupling the deliver of the site from the management of the content.&lt;/p>
&lt;p>This is very understandable, as your backend needs can be very different then the portal. The backend CMS has rigid security and workflow concerns and the front-end is optimized to serve pages fast.&lt;/p>
&lt;p>I'm seeing very little talk about the coupling needs of the site structure in terms of the content and this surprises me. The CMS has to have some level of knowledge as to how to front-end uses the content in order to be effective. Our current CMS maintains a concept of a 'portal Model' that reflects the page structure on the site. The CMS can serve multiple sites through different portal models. To me this seems a core need and a clear gap in the industry.&lt;/p></description></item><item><title>grails java.sql.SQLException: Table not found in statement [insert into</title><link>https://www.aaronheld.com/post/grails-javasqlsqlexception-table-not-found-in-statement-insert-into/</link><pubDate>Sun, 08 Mar 2009 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/grails-javasqlsqlexception-table-not-found-in-statement-insert-into/</guid><description>
&lt;p>I'm spinning up a new &lt;a href="http://www.grails.org" title="Goovy on Grails">grails&lt;/a> experiment this weekend and ran into an error that I could not effectively google. So hopefully by adoping the very SEO style title others will benefit.&lt;/p>
&lt;p>I really want to like grails, it is a full stack web development framework modeled after Ruby on Rails but written &lt;a href="http://groovy.codehaus.org">Groovy&lt;/a> with full access to the JVM.&lt;/p>
&lt;p>I have an excellent project in mind for some facebook integration using a Java library I've some experience with so grails seemed to fit.&lt;/p>
&lt;p>I built a simple domain class and wired it to the facebook API thinking to get a working interation done and ran into immediate problems.  The Grails convetion is that during develolment you hardcode some 'test' objects into the startup so that every time you start it creates a new set of database tables in an in-memory database.&lt;/p>
&lt;p>I built a simple domain object:&lt;/p>
&lt;blockquote>
&lt;p>class RichMessage { String msg Integer from }&lt;/p>
&lt;/blockquote>
&lt;p>and put this into my 'startup'&lt;/p>
&lt;blockquote>
&lt;p>new RichMessage(msg:&amp;quot;test1&amp;quot;,from:88117930).save() new RichMessage(msg:&amp;quot;test2&amp;quot;,from:105019979).save()&lt;/p>
&lt;/blockquote>
&lt;p>The error that I saw was that the objects could not be inserted.  I spent a some time playing with my 'RichMessage' object on the web and in the grails shell.&lt;/p>
&lt;p>Examining the stacktrace I saw this exception deeply nested down.&lt;/p>
&lt;blockquote>
&lt;p>Caused by: java.sql.SQLException: Table not found in statement [insert into rich_message (id, version, from, msg) values (null, ?, ?, ?)]&lt;/p>
&lt;/blockquote>
&lt;p>So basically there was nothing wrong with my bootstrap file, the error was in the domain class itself.  I used 'from' - a reserved word.  That simple.  It would be nice if in the hundreds of lines of stacktrace there was some error on the hibernate table creation, but there was not.&lt;/p>
&lt;p>As a contrast here is the error from Django/python for the same mistake:&lt;/p>
&lt;blockquote>
&lt;p>File &amp;quot;/Users/comcast/Documents/projects/mhi/pages/models.py&amp;quot;, line 38 from = models.ForeignKey(User) ^ SyntaxError: invalid syntax&lt;/p>
&lt;/blockquote></description></item></channel></rss>