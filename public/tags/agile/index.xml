<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>agile on Aaron's Blog</title><link>https://www.aaronheld.com/tags/agile/</link><description>Recent content in agile on Aaron's Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Tue, 12 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aaronheld.com/tags/agile/index.xml" rel="self" type="application/rss+xml"/><item><title>JIRA story point totals using Ruby and Rest</title><link>https://www.aaronheld.com/post/jira-story-point-totals-using-ruby-and-rest/</link><pubDate>Tue, 12 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/jira-story-point-totals-using-ruby-and-rest/</guid><description>
&lt;p>I'm using a hosted version of JIRA and needed to obtain quick totals based on filters that I have setup.&lt;/p>
&lt;p>I could not find any easy documentation online so I thought I'd share my quick hack.&lt;/p>
&lt;p>The &lt;a href="https://developer.atlassian.com/display/JIRADEV/JIRA+REST+API+Example+-+Query+issues">REST API is very well documented&lt;/a> and uses the same JQL as the filters do.&lt;/p>
&lt;p>In order to view the commit list for an iteration I have some JQL that looks like:&lt;/p>
&lt;p>fixversion = 20120611 and fixversion was 20120611 ON &amp;quot;2012/06/11&amp;quot; AND status NOT IN (canceled, &amp;quot;on hold&amp;quot;)&lt;/p>
&lt;p>In order to feed that into the API I needed to construct a url along the lines of&lt;/p>
&lt;pre>&lt;code>https://**********.atlassian.net/rest/api/2/search?jql=#{urlencoded JQL string}&amp;amp;fields=customfield\_10003&amp;amp;maxresults=400
&lt;/code>&lt;/pre>
&lt;p>The &amp;amp;fields=customfield_10003 instruct the API to return a minimal fieldlist and only include that custom field, which for me is Story Points.  By default the API will return 50, so bump that to 400 to be safe.&lt;/p>
&lt;p>The Ruby code looks like&lt;/p>
&lt;pre>&lt;code>def getData(api,qs=&amp;quot;&amp;quot;)
url = &amp;quot;https://energyplus.atlassian.net/rest/api/2/#{api}?#{qs}&amp;quot;
res = open(url,
&amp;quot;Authorization&amp;quot; =&amp;gt; &amp;quot;Basic &amp;quot; + 
Base64.strict\_encode64(USERNAME:PASSWORD)) {|f|
JSON.parse(f.read)
})
&lt;/code>&lt;/pre>
&lt;p>Calling that function I use something along the lines of&lt;/p>
&lt;pre>&lt;code>result =  getData(&amp;quot;search&amp;quot;, &amp;quot;jql=&amp;quot; + URI::encode(jql + '&amp;amp;fields=customfield\_10003&amp;amp;maxResults=400'))
&lt;/code>&lt;/pre>
&lt;p>The final step is to loop through all the results and sum the 'Story Point' values&lt;/p>
&lt;pre>&lt;code>puts &amp;quot;Total: &amp;quot; + res\[&amp;quot;issues&amp;quot;\].inject(0){|sum, item| sum + item\[&amp;quot;fields&amp;quot;\]\[&amp;quot;customfield\_10003&amp;quot;\]}.to\_s
&lt;/code>&lt;/pre>
&lt;p>If you are having issues with the SSL cert, try adding&lt;/p>
&lt;pre>&lt;code>OpenSSL::SSL::VERIFY\_PEER = OpenSSL::SSL::VERIFY\_NONE
&lt;/code>&lt;/pre>
&lt;p>Here is my actual script in its undocumented glory: &lt;a href="https://gist.github.com/2919437">https://gist.github.com/2919437&lt;/a>&lt;/p>
&lt;p>If you think you can improve it, drop me a note - I'm hiring ;)&lt;/p></description></item><item><title>the measure of Awesome</title><link>https://www.aaronheld.com/post/the-measure-of-awesome/</link><pubDate>Sun, 23 Jan 2011 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/the-measure-of-awesome/</guid><description>
&lt;p>Development at work has been trending well in the new year and the team is getting excited about our formal incorporation of practices such as TDD and pair programming.&lt;/p>
&lt;p>I'm definitely perceive an intangible benefit in culture and fun. With a full test suite and engaged developers working out loud coding is fun again.&lt;/p>
&lt;p>I give a lot of thought to developer efficiency and generating metrics around our output is very important to me.  We are at a point in this iteration where I have too many stories in progress and it is taking a few extra days to get work completed and accepted.  This does not concern me greatly since this is a new team and it usually takes a few turns to get into a rhythm.  I was walking down the hall and one of developers said that things are going 'Awesome'.  I said &amp;quot;&lt;em>Great, but &lt;strong>awesome&lt;/strong> is not a metric&lt;/em>&amp;quot;.&lt;/p>
&lt;p>Since then he and the rest of the team have risen to the challenge and we have some demonstrable facts in low bug counts and high numbers of actual hours (hands on keyboard time) logged.&lt;/p>
&lt;p>I'll have a clue in a few weeks and 'know' in a few iterations that TDD and pair programming have raised productivity in this team.  For right now I do &lt;em>think&lt;/em> things have improved and &lt;em>I feel&lt;/em> that our velocity is going to increase.  &lt;em>IMHO&lt;/em> my personal job satisfaction has increased.&lt;/p>
&lt;p>So I may have been nieve last week in saying awesome is not a metric.  I'm now thinking that awesome must a metic with a correlation to both employee retention and code quality.  We simply have not developed the tools to measure and understand this thing we call 'awesome'.  I can only observe the secondary effects that occur when there is &amp;quot;awesome&amp;quot; within a team.&lt;/p>
&lt;p>This is kind of like gravity.  Science can only measure the effects of gravity but you can't run without it.  And running beats floating back and forth aimlessly any day.....&lt;/p></description></item><item><title>Jugaad - India's Agile style</title><link>https://www.aaronheld.com/post/jugaad-indias-agile-style/</link><pubDate>Sun, 14 Nov 2010 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/jugaad-indias-agile-style/</guid><description>
&lt;p>I’ve been reading about India’s concept of Jugaad, possibly poised to enter our buzzword vocabulary since it came up in the context of what &lt;a href="http://www.nytimes.com/roomfordebate/2010/11/07/what-obama-can-learn-from-india">Obama can learn from that country&lt;/a>.&lt;/p>
&lt;p>Where the &lt;a href="http://agilemanifesto.org/">Agile Manifesto&lt;/a> starts with “Individuals and Interactions” the &lt;a href="http://blogs.hbr.org/cs/2010/01/jugaad_a_new_growth_formula_fo.html">Harvard Business Review&lt;/a> kicks off Jugaad with “Thrift not Waste”.&lt;/p>
&lt;p>All too often I’ve seen Agile work because a scarcity of resources (money, time or knowledge) pushed an otherwise waterfall loving group into giving Agile a shot. The tenants of Jugaad resonate with me as a more general philosophy about how to get things accomplished then Agile’s focus on “working software”.&lt;/p>
&lt;p>&lt;strong>Agile Manifesto&lt;/strong>&lt;/p>
&lt;p>&lt;em>We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value&lt;/em>&lt;/p>
&lt;p>Individuals and interactions over processes and tools Working software over comprehensive documentation&lt;/p>
&lt;p>Customer collaboration over contract negotiation&lt;/p>
&lt;p>Responding to change over following a plan&lt;/p>
&lt;p>&lt;strong>Jugaad (quoted from &lt;a href="http://blogs.hbr.org/cs/2010/01/jugaad_a_new_growth_formula_fo.html">HBR&lt;/a>):&lt;/strong>&lt;/p>
&lt;p>&lt;em>The Hindi term roughly translates as “overcoming harsh constraints by improvising an effective solution using limited resources”. We call it the art of creative improvisation.&lt;/em>&lt;/p>
&lt;p>Thrift not waste. Tackle scarcity.&lt;/p>
&lt;p>Inclusion, not exclusion. diversity of communities&lt;/p>
&lt;p>Bottom-up participation, not top-down command and control.&lt;/p>
&lt;p>Flexible thinking and action, not linear planning.&lt;/p>
&lt;p>It feels like we are talking about the same thing. Get a team together and empower them to solve the necessary problem. Nowhere is there a concept of ‘throw money at the problem’ or ‘hire more consultants’. Plan for change and change plans in order to achieve success.&lt;/p>
&lt;p>I’m on a barcamp high today. We could have had a conference with a big budget, focused our marketing on the demographic of web designers/developers, planned it from an executive committee and wrote a gant chart tracking the critical path from start to finish. It would have been a big show, but it would not have been barcamp and it would not have been awesome.&lt;/p>
&lt;p>Software engineers learned that top down does not work. Indian’s entrepreneurs espousing that top down does not work.&lt;/p>
&lt;p>Spend a few moments today to consider if you think top down, centralized control of food production is a good idea: &lt;a href="http://foodfreedom.wordpress.com/2010/04/24/s-510-is-hissing-in-the-grass/">http://foodfreedom.wordpress.com/2010/04/24/s-510-is-hissing-in-the-grass/&lt;/a>&lt;/p></description></item><item><title>Project Management is critical for Useless projects</title><link>https://www.aaronheld.com/post/project-management-is-critical-for-useless-projects/</link><pubDate>Fri, 17 Jul 2009 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/project-management-is-critical-for-useless-projects/</guid><description>
&lt;p>This about this:&lt;/p>
&lt;p>If you have a project with an estimated cost of $1MM and you expect a return of $1.1MM then strict governance and process controls are critical to success. A variance of 10% will take you from profitability to a loss.&lt;/p>
&lt;p>If you have a project with the same estimated $1MM cost but an expected return of $50MM then project management is less critical. a 10% variance will not really matter in the big picture. Given my fictional example even a 100% to 500% cost overrun could happen and keep the &amp;quot;success&amp;quot; label.&lt;/p>
&lt;p>So the take home message is that project management is critical for useless projects. If you have a great project then even with terrible project management you will still be successful.&lt;/p>
&lt;p>In my own experience we run a might tighter governance on the weekly 'Features and Maintenance' sprint team as opposed to the month long 'bigger feature' sprint.&lt;/p>
&lt;p>So put your bad PMs on key initiatives and shuffle the best to the menial tasks.&lt;/p>
&lt;p>And get yourself on a 'no-fail' path by ensuring that all your projects have large ROI with logarithmic (hockey stick) growth.&lt;/p>
&lt;p>I love reading articles by fearless people with 'tenure' at IEEE!&lt;/p>
&lt;p>&lt;a href="http://www2.computer.org/portal/web/computingnow/0709/whatsnew/software-r">http://www2.computer.org/portal/web/computingnow/0709/whatsnew/software-r&lt;/a>&lt;/p></description></item><item><title>Peeling back the onion of stupidity</title><link>https://www.aaronheld.com/post/peeling-back-the-onion-of-stupidity/</link><pubDate>Thu, 07 May 2009 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/peeling-back-the-onion-of-stupidity/</guid><description>
&lt;p>I've mentioned the book &lt;a href="http://www.amazon.com/gp/product/0932633676?ie=UTF8&amp;amp;tag=aarhel-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0932633676">Adrenaline Junkies&lt;/a>&lt;img src="http://www.assoc-amazon.com/e/ir?t=aarhel-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0932633676" alt=""> in a previous post and I'm not seeing the value in a common language for discussing problems.&lt;/p>
&lt;p>Today's pattern is the 'Onion of Stupidity'.  This is a common pattern where you build up hack upon workaround upon compromise, inject a little shortsightedness and wind up seeing a good chunk of your effort goes into cleaning it up.  A &lt;a href="http://codeartisan.blogspot.com/" title="Jon Moore's blog">colleague&lt;/a> here promoted the term &amp;quot;technical debt&amp;quot; to describe issues were we these types of issues and help us prioritize them.  I'm thinking that my Onion is more about 'strategy debt'.  The onion is usually built with best intentions at all sides.&lt;/p>
&lt;p>Peeling back the layers of stupidity is tedious and takes time, but cutting through it makes everyone in the room cry.&lt;/p>
&lt;p>I'm sure we have all been here.  I had 2 instances of it today at work, and one with an old friend.  He wanted me to update some joomla modules and I said yes.  I go to ssh and wget the files and find out there is no ssh.  Without that I have to download the files, extract then and upload lots of little ones.  Then I find that some of the original files are edited so the have to be diffed.  Now I have to download the files and diff them.  Then I want to check but can't run it without the database.  I just restored my local ubuntu image and don't yet have MySQL. So I go to install MySQL and don't have connectivity yet between the VirtualBox and osx....&lt;/p>
&lt;p>So the first layer of this Onion that I must peel is to fix Bridged Ethernet.  Or I cut the darn thing and move the site to a real hosting company.&lt;/p>
&lt;p>So while I'm pretty much out of luck on my personal life here at my day job we all got together with a commitment to peel back our layers of issues as a team and focus on building out a solid foundation.  Hopefully the only onions we will have are the ones served on the sliders upstairs.....&lt;/p></description></item><item><title>A House With No Front Door Keeps you off the streets</title><link>https://www.aaronheld.com/post/a-house-with-no-front-door-keeps-you-off-the-streets/</link><pubDate>Tue, 25 Nov 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/a-house-with-no-front-door-keeps-you-off-the-streets/</guid><description>
&lt;p>I found an interesting article today.&lt;/p>
&lt;p>&lt;a href="http://www.pragmaticmarketing.com/publications/topics/05/0501sk1" title="Pragmatic Marketing">A House With No Front Door&lt;/a>&lt;/p>
&lt;p>It is written by a product marketing professional lamenting about dealing with 'resource constrained' engineering teams.&lt;/p>
&lt;p>Seeing as how I come from a resource constrained engineering team I thought it was an interesting read.  The premise of the article was the disconnect as described:&lt;/p>
&lt;blockquote>
&lt;p>Perhaps it is my job to get this perspective across to them, and I try to do that, but the gulf between the “feature triage” perspective that many engineers have, and the “holistic” customer or market perspective that is needed is enormous.&lt;/p>
&lt;/blockquote>
&lt;p>So the article goes on to talk about how engineers struggle for workarounds and laments&lt;/p>
&lt;blockquote>
&lt;p>If something is truly necessary, then why is it not worth implementing correctly? Yes, I understand deadlines and resource constraints and marketing, sales and competitive pressures etc, but it is very easy to fall into the habit of providing partial solutions to problems, and laying the burden of what’s missing onto users.&lt;/p>
&lt;/blockquote>
&lt;p>And the final closing argument revolved around the house this persons team would build&lt;/p>
&lt;blockquote>
&lt;p>Imagine if houses were built with this premise, and every time some aspect of the house was discussed, questions about workarounds were raised. You’d end up with a two storey house, that required external ladders to get to the second floor, a fireman’s pole to quickly get down to the first (no wasted floor space inside because of unnecessary staircases), that wouldn’t have a front door (the back door should be sufficient), that had only one big bedroom and closet for everyone (those extra walls and doors cost time and money you know), one bathroom (it would be an outhouse to give equal access from either floor), and only a wood burning stove to both heat the house and to use for cooking (minimizes unnecessary duct work).&lt;/p>
&lt;/blockquote>
&lt;p>The crazy house happens because developers know that they can't give the people what is being ordered, but they do their best to get a roof over their customers heads.  The real question is why did product marketing &lt;strong>order a two story house when they could only afford a ranch?&lt;/strong>.  This would not happen in a house because the builder would simply raise the up front costs.  The recent sub-prime lending issues clearly show how people are willing to pay more then they can afford in order to get what they think they need.  So people that should be in a small ranch wind up being in a 3 story colonial until they go into foreclosure.&lt;/p>
&lt;p>In a business if the developers do what builders did and simply raise the prices and give people what they ask for, then they would go into foreclosure as well.&lt;/p>
&lt;p>Perhaps the real question we should be asking is why do product marketing people continually try to 'give the customers what they want' without getting the resources and money in place to achieve their goal.&lt;/p>
&lt;p>I've been writing software against requirements for over 20 years and have seen this over and over when the product people and business people are not the same human or at least in-sync.&lt;/p>
&lt;p>Scrum and Agile are desinged to solve this by making it a team effort.  So in Scrum it is not the 'developers' that build this Dr Seuss house, but the team.  I think this is why many people fear Scrum. There is no 'justifiable failure'.&lt;/p></description></item></channel></rss>