<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>architecture on Aaron's Blog</title><link>https://www.aaronheld.com/tags/architecture/</link><description>Recent content in architecture on Aaron's Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sat, 29 Sep 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aaronheld.com/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Practical Hypermedia for our post ORM world</title><link>https://www.aaronheld.com/post/practical-hypermedia/</link><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/practical-hypermedia/</guid><description>
&lt;p>This post is for people who have started learning about hypermedia and feel that it over complicates the elegance of REST. When I started hearing about hypermedia I felt it was adding architecture acrobatics for the sake of buzzword enhancement. After having applied these techniques in a few places not only have a drunk the cool aid, I've setup a stand beside my desk. I look back and try to understand where my initial negative reaction came from. I realized that many of the examples were trivial and did not demonstrate the reality of what hypermedia brings to the table.&lt;/p>
&lt;p>The main epiphany I'd like to share is that REST has proven itself as the best way to take an ORM focused approach to an API and Hypermedia is proving itself as the best way to take a business process approach to an API.&lt;/p>
&lt;p>A key aspect of Hypermedia that I don’t see used often enough is the notion of a template. The template portion of the spec calls for the API to send down to the client the parameters necessary to call the API itself. This notion is akin to how you load a web page with a blank form and then submit the form directly. You don’t post to twitter by typing a bunch of stuff into the url, you load twitter first and then fill in a textarea.&lt;/p>
&lt;p>Essentially in my early experiments I was writing XML api payloads where the template portion was basically an HTML form that the client could decompose and render. The problem that I felt was that I was basically writing a full old school web application that happened to send XML rather than HTML back to the client. Then my client had extra complexity in parsing the XML and implementing all the UX rules to get the client looking and feeling right. I also had to build 2 webapps that both were basically doing the same thing, view, validation and calling a service.&lt;/p>
&lt;p>Now lets take a look at doing this for real using AngularJS, JSON and a deadline.&lt;/p>
&lt;p>The business case: Our sales team has access to a report of customer service change activity. Current use cases include a simple sales report to show and total the usage of a sales rep's customers on a monthly basis.&lt;/p>
&lt;p>An initial implementation focusing around the orm simply used Linq against Entity Framework to retrieve the data from a MSSQL database.&lt;/p>
&lt;p>Before we can generate the report we need to present an input form to the user. The design calls for a &amp;quot;Sales Rep&amp;quot; drop down list which will allow us to report on activity by sales rep. In an ORM world generating this drop down is easy enough, throw up a few classes against the employees table, query based on role, and render that to HTML on the server.&lt;/p>
&lt;p>In our razor/asp/whatever template there is some code along the lines of:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% foreach rep in salesreps %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;span class="ln">3&lt;/span>&amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy!&lt;/p>
&lt;p>Next iteration we are asked to restrict reports such that a rep can only see their own customers, but the sales manager can see all customers.&lt;/p>
&lt;p>Now the code looks something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% if User.hasRole(Roles.SALESMGR) %&amp;gt;
&lt;span class="ln">3&lt;/span> &amp;lt;% foreach rep in salesreps %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;span class="ln">4&lt;/span> &amp;lt;% else %&amp;gt;
&lt;span class="ln">5&lt;/span> &amp;lt;option value=&amp;#34;&amp;lt;%=User.id%&amp;gt;&amp;#34;&amp;gt;User.Name&amp;lt;/option&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ok so this could be refactored along the lines of&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% foreach rep in salesreps\_Based\_on\_Role %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The relevant point here is that the salesrep list restrictions must be handled in the view based on this use case.&lt;/p>
&lt;p>Once that work is done we need to generate the report data itself. Building a restful endpoint for this sounds like a good idea and is an incremental effort for a reusable data source. Most people (including myself) would build out that restful endpoint and use it to generate the data. Maybe put some logic in the server side controller that will parse the HTML submission form, apply security, and they make the restful call.&lt;/p>
&lt;p>This restful approach could be a generic &amp;quot;SalesRep’ list endpoint and move the filtering logic there. Since we also need a list of sales reps for things like &amp;quot;forwarding a customer’ that new end point would need to know how it is going to be used before it is called. So the CONTEXT of how the API is called matters. Unfortunately in a stateless world the API call does not have the context unless it is given a hint by the client.&lt;/p>
&lt;p>Additionally we need to implement this logic against the report generation as well, otherwise anyone could modify the http request and generate a report for a salesrep against our business requirements. The linq query (psudocode) could look like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>//find all the records
&lt;span class="ln">2&lt;/span>IEnumerable&amp;lt;ServiceChanges&amp;gt; servicechanges =
&lt;span class="ln">3&lt;/span> from records in recordsORM
&lt;span class="ln">4&lt;/span> select record where SalesRep = {0};
&lt;span class="ln">5&lt;/span>// and filter based on role
&lt;span class="ln">6&lt;/span>if !User.rolein(Roles.SALESMGR) {
&lt;span class="ln">7&lt;/span> servicechanges = servicechanges.Where(records.salesrep.id = {0},User.id);
&lt;span class="ln">8&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our orm world, even if we we create restful services such as &amp;quot;/api/servicechanges/’ and &amp;quot;/api/salesrep/’ we still have two bits of unrelated code that need to be kept in sync. The view is ultimately coupled to the api call.&lt;/p>
&lt;p>The ORM layer has now served to couple the database directly to the view. dropdowns are created against the salesreps_Based_on_Role object which is coupled to the employee tables and sprikled with business logic for every view it may be called for. Not a very reusable pattern simply because it is called by the client WITHOUT THE CONTEXT of how it will be used.&lt;/p>
&lt;p>Older developers will remember the good old stateful days of foxbase and objectpal where these use cases would be trivial. Just implement row level security into the table and your salesrep list is a view such as:&lt;/p>
&lt;p>reportview = select * from serivceactivity join salesrep.id in ALLOWED_IDS_BASED_ON_ROLE&lt;/p>
&lt;p>then you bind a drop-down list to &amp;quot;select distinct salesrep.id from reportview&amp;quot;&lt;/p>
&lt;p>this antiquated approach has the benefit of both the form construction as well as the report generation being based off the sames business rules - row level restrictions. Sometimes I miss the stateful, context rich, execution environment of an old school desktop application.&lt;/p>
&lt;h3 id="hypermedia-approach">Hypermedia approach&lt;/h3>
&lt;p>How does hypermedia lend itself to a cleaner solution?&lt;/p>
&lt;p>It brings context back to the conversation by preserving the state at the API level.&lt;/p>
&lt;p>This is what HATEOS &lt;a href="http://en.wikipedia.org/wiki/HATEOAS">http://en.wikipedia.org/wiki/HATEOAS&lt;/a> , Hypermedia As an Engine Of State, means.&lt;/p>
&lt;p>A key tenet of hypermedia is that the client does not need any prior knowledge in order to make the api call. This is where common sense needs to balance reality. I don’t expect to build a magic client that can do anything, but within the scope of a particular problem domain we can limit the need of the client to make multiple calls in order to &amp;quot;setup’ the parameters necessary.&lt;/p>
&lt;p>In the example of the sales rep situation, our client still need to make a call to the server before calling the api. In this case however it calls the /salesrep/ service itself and retrieves the hypermedia template. (yes this is akin to WSDL, if WSDL was easier to understand and extensible). When the server side code is calling for the list of salesreps for the client to render it has the context of how the data will be called, as well as the knowing the user/role based security model to operate under.&lt;/p>
&lt;p>Our hypermedia design is based on a combination of JSON+collection media type as published by Mike Amundsen &lt;a href="http://www.amundsen.com/media-types/collection/">http://www.amundsen.com/media-types/collection/&lt;/a> blended with what we have experienced using the indispensable JIRA api &lt;a href="http://docs.atlassian.com/jira/REST/latest/">http://docs.atlassian.com/jira/REST/latest/&lt;/a>.&lt;/p>
&lt;p>JSON+collection calls for a query template. This query template is where the api will describe to the client how to make a query or find data.&lt;/p>
&lt;p>In my case it looks something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>&amp;#34;queries&amp;#34; : \[{
&lt;span class="ln"> 2&lt;/span> &amp;#34;href&amp;#34; : &amp;#34;/api/saleslog/search&amp;#34;,
&lt;span class="ln"> 3&lt;/span> &amp;#34;rel&amp;#34; : &amp;#34;search&amp;#34;,
&lt;span class="ln"> 4&lt;/span> &amp;#34;data&amp;#34; : \[
&lt;span class="ln"> 5&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;startDate&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;date&amp;#34;, &amp;#34;prompt&amp;#34;:&amp;#34;Start date for report&amp;#34;},
&lt;span class="ln"> 6&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;endDate&amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;date&amp;#34;, &amp;#34;prompt&amp;#34;:&amp;#34;End date for report&amp;#34;},
&lt;span class="ln"> 7&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;salesrep&amp;#34;,
&lt;span class="ln"> 8&lt;/span> &amp;#34;type&amp;#34;:&amp;#34;select&amp;#34;,
&lt;span class="ln"> 9&lt;/span> &amp;#34;required&amp;#34;: true,
&lt;span class="ln">10&lt;/span> &amp;#34;options&amp;#34;:\[
&lt;span class="ln">11&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;B. Hartnell&amp;#34;, value:1},
&lt;span class="ln">12&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;J. Pertwee&amp;#34;, value:3},
&lt;span class="ln">13&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;P Troughton&amp;#34;, value:2},
&lt;span class="ln">14&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;T Baker&amp;#34;, value:4},
&lt;span class="ln">15&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;D Tennant&amp;#34;, value:10}
&lt;span class="ln">16&lt;/span> \]
&lt;span class="ln">17&lt;/span> }
&lt;span class="ln">18&lt;/span> \]
&lt;span class="ln">19&lt;/span> }\]
&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;p>To render that into a form using angular was remarkably easy:&lt;/p>
&lt;p>&lt;a href="http://fiddle.jshell.net/aaronheld/kQ8K3/" title="Fiddle this">http://fiddle.jshell.net/aaronheld/kQ8K3/&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://angularjs.org/">Angularjs&lt;/a> allows me to bind the client side state to the API and handles keeping the DOM and view in sync with the model.  More on that later (hint: synergy!)&lt;/p>
&lt;p>The fun part being that the client does not have to know anything about the security concerns around &amp;quot;salesRep’. The way that the drop down is rendered is something along the lines of&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span> &amp;lt;select ng:switch-when=&amp;#34;select&amp;#34; ng:model=&amp;#34;field.value&amp;#34; &amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;option ng:repeat=&amp;#34;option in field.options&amp;#34; value=&amp;#34;{{option.value}}&amp;#34;&amp;gt;{{option.name}}&amp;lt;/option&amp;gt;
&lt;span class="ln">3&lt;/span> &amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can google for some robust form builder implementations but with a good template representation they do not seem necessary for my needs. &lt;a href="http://007design.com/formular/index.html">http://007design.com/formular/index.html&lt;/a> was the inspiration for this approach.&lt;/p>
&lt;p>the final step is almost anticlimactic, for the client to render the drop down with security all that has to happen is that the API sends back a salesRep list with one option.&lt;/p>
&lt;p>From here I feel that we have an agile design. With suitable testing we have a confident implementation. So far all of the iterative updates have felt easy. Yesterday we were discussing changing the UX so that if there is one option we don’t render a select box (since there is no selection). In that case we simply change the angular form logic in the browser, where UX view logic belongs. Security changes and additional query logic is based in the server/API where it belongs.&lt;/p>
&lt;p>Next I’ll write up how we return the row items of the report and leverage hypermedia links to allow the client to perform operations on items based on business rules.&lt;/p>
&lt;p>This will all lead up to demonstrating how this an API first approach (rather then object model based design) will allow me to replace all of the search/list/operate work queues in my enterprise with a consistent pattern and greatly simplified software stack.&lt;/p>
&lt;p>If you are in Philly this November I'm thinking about a code walkthough at &lt;a href="http://2012.barcampphilly.org/">http://2012.barcampphilly.org/&lt;/a> See you there!&lt;/p></description></item><item><title>Designing a new Infrastructure is like buying a new car</title><link>https://www.aaronheld.com/post/designing-infrastructure-buying-car/</link><pubDate>Wed, 17 Jun 2009 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/designing-infrastructure-buying-car/</guid><description>
&lt;p>Because I happen to be both buying a new car and deploying new infrastructure the realization dawned upon me about how similar these two activities are.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>You start the investigation with some preconceived &amp;quot;gut-level&amp;quot; notions. code: Multiprocess distributed job engine is what I need car : I want a Mazda 3 with &amp;quot;Zoom Zoom&amp;quot;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everybody has a story about why your choice is bad code: &amp;quot;In my last job I used a python-C++ wrapper from vcron&amp;quot; car : My cousin&amp;quot;s friends brother had a mazda and the engine fell out on 95&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everybody loves what they have (but its not for you) code: Our feed system rocks, oh but we don&amp;quot;t pull in news every minute car : I love my Civic, oh but I don&amp;quot;t have 3 kids where one of them is 6&amp;quot;2&amp;quot;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everybody thinks what you currently have is no good code: &amp;quot;Your cache middleware is no good because it can&amp;quot;t run jobs&amp;quot;&amp;quot; car :  &amp;quot;Dude, you can&amp;quot;t drive a Camry and date girls&amp;quot;&amp;quot; (true comment post-divorce)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>** &lt;strong>You usually start this process due to a crash&lt;/strong> **&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>code: User gen data + no cache eviction = FAIL car : SUV from the side + swerve = One less Stop sign.&lt;/p>
&lt;p>So my investigation has started and it is taking interesting twists.   We pull in a weather feed via a RESTish api and the vendor would like us to FTP a large data file instead.  This is clearly a good fit for a multiprocess job engine so that project has kicked off for real.  I&amp;quot;m looking at one of the top open source systems &amp;quot;Job Scheduler&amp;quot;&amp;quot; because that fit all my critericode:  It can spread jobs across multiple machines and give operations some command and control of background systems.  Our ops team is really good at the command line / Solaris thing so having our systems look more like shell scripts and less like java interface implementations will help. I did a good amount of research and made sure that this app was solaris friendly and patted myself on the back for caring about my ops team.  Just the other day I find out that the solaris binary is sparc only and we plan on running this on Solaris/x86.  First threat to my guy choice has manifested.&lt;/p>
&lt;p>On the car front I went to reedman-toll and took the Mazda 3 (stick shift) around their test track with my daughter.  The car was a fun to drive but second gear took me from 5-25mph.  That will be awesome when I&amp;quot;m stuck in traffic (and pissed that I bought a manual rather then an automatic) but limited my sense of control over the gearing.  The point of a stick is to feel that &amp;quot;snick-snick&amp;quot; as you upshift around S curves and downshift into corners. In short there was no &amp;quot;Zoom-Zoom&amp;quot;&lt;/p>
&lt;p>In my youth I would have just deployed my first choice (one day I should blog about when I thought it was a good idea to build a custom accounting program) and bought a car based on first impressions.&lt;/p>
&lt;p>Now that I have less disposable income and more oversight on my engineering decisions am wiser I&amp;quot;ll take some time to really focus on what the needs are.&lt;/p>
&lt;p>I&amp;quot;ll blog more on this later, but I have to work on my project plan for the Alfresco based CMS.&lt;/p>
&lt;p>That was a good choice - Open source, Java, active community - &amp;quot;Zoom Zoom&amp;quot;..&lt;/p></description></item></channel></rss>