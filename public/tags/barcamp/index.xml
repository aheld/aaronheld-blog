<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>barcamp on Aaron's Blog</title><link>https://www.aaronheld.com/tags/barcamp/</link><description>Recent content in barcamp on Aaron's Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sat, 29 Sep 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aaronheld.com/tags/barcamp/index.xml" rel="self" type="application/rss+xml"/><item><title>Practical Hypermedia for our post ORM world</title><link>https://www.aaronheld.com/post/practical-hypermedia/</link><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/practical-hypermedia/</guid><description>
&lt;p>This post is for people who have started learning about hypermedia and feel that it over complicates the elegance of REST. When I started hearing about hypermedia I felt it was adding architecture acrobatics for the sake of buzzword enhancement. After having applied these techniques in a few places not only have a drunk the cool aid, I've setup a stand beside my desk. I look back and try to understand where my initial negative reaction came from. I realized that many of the examples were trivial and did not demonstrate the reality of what hypermedia brings to the table.&lt;/p>
&lt;p>The main epiphany I'd like to share is that REST has proven itself as the best way to take an ORM focused approach to an API and Hypermedia is proving itself as the best way to take a business process approach to an API.&lt;/p>
&lt;p>A key aspect of Hypermedia that I don’t see used often enough is the notion of a template. The template portion of the spec calls for the API to send down to the client the parameters necessary to call the API itself. This notion is akin to how you load a web page with a blank form and then submit the form directly. You don’t post to twitter by typing a bunch of stuff into the url, you load twitter first and then fill in a textarea.&lt;/p>
&lt;p>Essentially in my early experiments I was writing XML api payloads where the template portion was basically an HTML form that the client could decompose and render. The problem that I felt was that I was basically writing a full old school web application that happened to send XML rather than HTML back to the client. Then my client had extra complexity in parsing the XML and implementing all the UX rules to get the client looking and feeling right. I also had to build 2 webapps that both were basically doing the same thing, view, validation and calling a service.&lt;/p>
&lt;p>Now lets take a look at doing this for real using AngularJS, JSON and a deadline.&lt;/p>
&lt;p>The business case: Our sales team has access to a report of customer service change activity. Current use cases include a simple sales report to show and total the usage of a sales rep's customers on a monthly basis.&lt;/p>
&lt;p>An initial implementation focusing around the orm simply used Linq against Entity Framework to retrieve the data from a MSSQL database.&lt;/p>
&lt;p>Before we can generate the report we need to present an input form to the user. The design calls for a &amp;quot;Sales Rep&amp;quot; drop down list which will allow us to report on activity by sales rep. In an ORM world generating this drop down is easy enough, throw up a few classes against the employees table, query based on role, and render that to HTML on the server.&lt;/p>
&lt;p>In our razor/asp/whatever template there is some code along the lines of:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% foreach rep in salesreps %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;span class="ln">3&lt;/span>&amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy!&lt;/p>
&lt;p>Next iteration we are asked to restrict reports such that a rep can only see their own customers, but the sales manager can see all customers.&lt;/p>
&lt;p>Now the code looks something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% if User.hasRole(Roles.SALESMGR) %&amp;gt;
&lt;span class="ln">3&lt;/span> &amp;lt;% foreach rep in salesreps %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;span class="ln">4&lt;/span> &amp;lt;% else %&amp;gt;
&lt;span class="ln">5&lt;/span> &amp;lt;option value=&amp;#34;&amp;lt;%=User.id%&amp;gt;&amp;#34;&amp;gt;User.Name&amp;lt;/option&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ok so this could be refactored along the lines of&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;lt;select name=&amp;#34;salesrep&amp;#34;&amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;% foreach rep in salesreps\_Based\_on\_Role %&amp;gt;&amp;lt;option value=&amp;#34;&amp;lt;%= rep.id %&amp;gt;&amp;#34;&amp;gt;&amp;lt;%end%&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The relevant point here is that the salesrep list restrictions must be handled in the view based on this use case.&lt;/p>
&lt;p>Once that work is done we need to generate the report data itself. Building a restful endpoint for this sounds like a good idea and is an incremental effort for a reusable data source. Most people (including myself) would build out that restful endpoint and use it to generate the data. Maybe put some logic in the server side controller that will parse the HTML submission form, apply security, and they make the restful call.&lt;/p>
&lt;p>This restful approach could be a generic &amp;quot;SalesRep’ list endpoint and move the filtering logic there. Since we also need a list of sales reps for things like &amp;quot;forwarding a customer’ that new end point would need to know how it is going to be used before it is called. So the CONTEXT of how the API is called matters. Unfortunately in a stateless world the API call does not have the context unless it is given a hint by the client.&lt;/p>
&lt;p>Additionally we need to implement this logic against the report generation as well, otherwise anyone could modify the http request and generate a report for a salesrep against our business requirements. The linq query (psudocode) could look like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>//find all the records
&lt;span class="ln">2&lt;/span>IEnumerable&amp;lt;ServiceChanges&amp;gt; servicechanges =
&lt;span class="ln">3&lt;/span> from records in recordsORM
&lt;span class="ln">4&lt;/span> select record where SalesRep = {0};
&lt;span class="ln">5&lt;/span>// and filter based on role
&lt;span class="ln">6&lt;/span>if !User.rolein(Roles.SALESMGR) {
&lt;span class="ln">7&lt;/span> servicechanges = servicechanges.Where(records.salesrep.id = {0},User.id);
&lt;span class="ln">8&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our orm world, even if we we create restful services such as &amp;quot;/api/servicechanges/’ and &amp;quot;/api/salesrep/’ we still have two bits of unrelated code that need to be kept in sync. The view is ultimately coupled to the api call.&lt;/p>
&lt;p>The ORM layer has now served to couple the database directly to the view. dropdowns are created against the salesreps_Based_on_Role object which is coupled to the employee tables and sprikled with business logic for every view it may be called for. Not a very reusable pattern simply because it is called by the client WITHOUT THE CONTEXT of how it will be used.&lt;/p>
&lt;p>Older developers will remember the good old stateful days of foxbase and objectpal where these use cases would be trivial. Just implement row level security into the table and your salesrep list is a view such as:&lt;/p>
&lt;p>reportview = select * from serivceactivity join salesrep.id in ALLOWED_IDS_BASED_ON_ROLE&lt;/p>
&lt;p>then you bind a drop-down list to &amp;quot;select distinct salesrep.id from reportview&amp;quot;&lt;/p>
&lt;p>this antiquated approach has the benefit of both the form construction as well as the report generation being based off the sames business rules - row level restrictions. Sometimes I miss the stateful, context rich, execution environment of an old school desktop application.&lt;/p>
&lt;h3 id="hypermedia-approach">Hypermedia approach&lt;/h3>
&lt;p>How does hypermedia lend itself to a cleaner solution?&lt;/p>
&lt;p>It brings context back to the conversation by preserving the state at the API level.&lt;/p>
&lt;p>This is what HATEOS &lt;a href="http://en.wikipedia.org/wiki/HATEOAS">http://en.wikipedia.org/wiki/HATEOAS&lt;/a> , Hypermedia As an Engine Of State, means.&lt;/p>
&lt;p>A key tenet of hypermedia is that the client does not need any prior knowledge in order to make the api call. This is where common sense needs to balance reality. I don’t expect to build a magic client that can do anything, but within the scope of a particular problem domain we can limit the need of the client to make multiple calls in order to &amp;quot;setup’ the parameters necessary.&lt;/p>
&lt;p>In the example of the sales rep situation, our client still need to make a call to the server before calling the api. In this case however it calls the /salesrep/ service itself and retrieves the hypermedia template. (yes this is akin to WSDL, if WSDL was easier to understand and extensible). When the server side code is calling for the list of salesreps for the client to render it has the context of how the data will be called, as well as the knowing the user/role based security model to operate under.&lt;/p>
&lt;p>Our hypermedia design is based on a combination of JSON+collection media type as published by Mike Amundsen &lt;a href="http://www.amundsen.com/media-types/collection/">http://www.amundsen.com/media-types/collection/&lt;/a> blended with what we have experienced using the indispensable JIRA api &lt;a href="http://docs.atlassian.com/jira/REST/latest/">http://docs.atlassian.com/jira/REST/latest/&lt;/a>.&lt;/p>
&lt;p>JSON+collection calls for a query template. This query template is where the api will describe to the client how to make a query or find data.&lt;/p>
&lt;p>In my case it looks something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>&amp;#34;queries&amp;#34; : \[{
&lt;span class="ln"> 2&lt;/span> &amp;#34;href&amp;#34; : &amp;#34;/api/saleslog/search&amp;#34;,
&lt;span class="ln"> 3&lt;/span> &amp;#34;rel&amp;#34; : &amp;#34;search&amp;#34;,
&lt;span class="ln"> 4&lt;/span> &amp;#34;data&amp;#34; : \[
&lt;span class="ln"> 5&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;startDate&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;date&amp;#34;, &amp;#34;prompt&amp;#34;:&amp;#34;Start date for report&amp;#34;},
&lt;span class="ln"> 6&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;endDate&amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;date&amp;#34;, &amp;#34;prompt&amp;#34;:&amp;#34;End date for report&amp;#34;},
&lt;span class="ln"> 7&lt;/span> {&amp;#34;name&amp;#34; : &amp;#34;salesrep&amp;#34;,
&lt;span class="ln"> 8&lt;/span> &amp;#34;type&amp;#34;:&amp;#34;select&amp;#34;,
&lt;span class="ln"> 9&lt;/span> &amp;#34;required&amp;#34;: true,
&lt;span class="ln">10&lt;/span> &amp;#34;options&amp;#34;:\[
&lt;span class="ln">11&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;B. Hartnell&amp;#34;, value:1},
&lt;span class="ln">12&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;J. Pertwee&amp;#34;, value:3},
&lt;span class="ln">13&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;P Troughton&amp;#34;, value:2},
&lt;span class="ln">14&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;T Baker&amp;#34;, value:4},
&lt;span class="ln">15&lt;/span> {&amp;#34;name&amp;#34;:&amp;#34;D Tennant&amp;#34;, value:10}
&lt;span class="ln">16&lt;/span> \]
&lt;span class="ln">17&lt;/span> }
&lt;span class="ln">18&lt;/span> \]
&lt;span class="ln">19&lt;/span> }\]
&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;p>To render that into a form using angular was remarkably easy:&lt;/p>
&lt;p>&lt;a href="http://fiddle.jshell.net/aaronheld/kQ8K3/" title="Fiddle this">http://fiddle.jshell.net/aaronheld/kQ8K3/&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://angularjs.org/">Angularjs&lt;/a> allows me to bind the client side state to the API and handles keeping the DOM and view in sync with the model.  More on that later (hint: synergy!)&lt;/p>
&lt;p>The fun part being that the client does not have to know anything about the security concerns around &amp;quot;salesRep’. The way that the drop down is rendered is something along the lines of&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span> &amp;lt;select ng:switch-when=&amp;#34;select&amp;#34; ng:model=&amp;#34;field.value&amp;#34; &amp;gt;
&lt;span class="ln">2&lt;/span> &amp;lt;option ng:repeat=&amp;#34;option in field.options&amp;#34; value=&amp;#34;{{option.value}}&amp;#34;&amp;gt;{{option.name}}&amp;lt;/option&amp;gt;
&lt;span class="ln">3&lt;/span> &amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can google for some robust form builder implementations but with a good template representation they do not seem necessary for my needs. &lt;a href="http://007design.com/formular/index.html">http://007design.com/formular/index.html&lt;/a> was the inspiration for this approach.&lt;/p>
&lt;p>the final step is almost anticlimactic, for the client to render the drop down with security all that has to happen is that the API sends back a salesRep list with one option.&lt;/p>
&lt;p>From here I feel that we have an agile design. With suitable testing we have a confident implementation. So far all of the iterative updates have felt easy. Yesterday we were discussing changing the UX so that if there is one option we don’t render a select box (since there is no selection). In that case we simply change the angular form logic in the browser, where UX view logic belongs. Security changes and additional query logic is based in the server/API where it belongs.&lt;/p>
&lt;p>Next I’ll write up how we return the row items of the report and leverage hypermedia links to allow the client to perform operations on items based on business rules.&lt;/p>
&lt;p>This will all lead up to demonstrating how this an API first approach (rather then object model based design) will allow me to replace all of the search/list/operate work queues in my enterprise with a consistent pattern and greatly simplified software stack.&lt;/p>
&lt;p>If you are in Philly this November I'm thinking about a code walkthough at &lt;a href="http://2012.barcampphilly.org/">http://2012.barcampphilly.org/&lt;/a> See you there!&lt;/p></description></item><item><title>BarCamp Philly 2010 Summary - Opendata and beyond</title><link>https://www.aaronheld.com/post/barcamp-philly-2010-summary-opendata-and-beyond/</link><pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/barcamp-philly-2010-summary-opendata-and-beyond/</guid><description>
&lt;p>When wrapping up the VIm talk @&lt;a href="http://twitter.com/trevmex">trevmex&lt;/a> mentioned that people share their &lt;a href="https://github.com/search?type=Everything&amp;amp;language=vim&amp;amp;q=dotfile&amp;amp;repo=&amp;amp;langOverride=&amp;amp;x=0&amp;amp;y=0&amp;amp;start_value=1">dotFiles on github&lt;/a>.  This blew my mind.  I can sit in front of anyones desk and start using their eclipse and immediately be productive.  The secret to VIm is the years of refactoring the configuration and shortcuts, known as the dotFiles.  You probably couldn't even execute a mapped command on my machine since I &lt;a href="http://vimdoc.sourceforge.net/htmldoc/map.html#mapleader" title="Map your leader">map the leader&lt;/a> based on my keyboard.&lt;/p>
&lt;p>I'm used to reading about VIm plugins and tips on sites like &lt;a href="http://www.vim.org/">http://www.vim.org/&lt;/a> but I never really thought about the power of collaborating on the ultimate VIm config via the forking, pushing and pulling that is github.  The idea of forking someones config and :%s/leader='\'/leader='`'/g is really compelling.&lt;/p>
&lt;p>So I got to my next session, Philly Opendata, a bit early and powered up the University of the Arts guest wireless to see what this gitHub dotfile concept is really about and could not connect. After an hour of discussing how VIm keeps your hands on keyboard and head focused on the task I'm again reduced to a mouse clicking consumer wondering where the button is that will get my osx to work, or give me a clue as to why it won't.  I would have searched for &amp;quot;iwspy on osx&amp;quot; but without wireless it would have been a short trip.&lt;/p>
&lt;p>The point of this segue is that &lt;a href="https://twitter.com/mofro">Maurice&lt;/a> noticed my plight and leaned over with the security settings to his mifi app to get me out of the 80's.   That has never happened at any formal show I've been to.  He had signal and was willing to share.&lt;/p>
&lt;p>Turns out Philadelphia has &lt;a href="http://twitter.com/opendataphilly">data&lt;/a> and is also willing to share.&lt;/p>
&lt;p>Getting access to this data is important for so many reasons.  Before I talk about the social importance of opendata I have to step back and comment that crunching huge datasets and experimenting with bizarre visualizations is the type of fun that drew me to computers in the first place.  Whether plotting Fourier power transforms of breathing sheep or number of potholes per coffee shop there is something exciting about creating a unique perspective on otherwise boring or overwhelmingly complex data.&lt;/p>
&lt;p>Having transparency into our government machine is really just a continuation of our need for independent newspapers.  Thomas Jefferson is often quoted as saying that &lt;em>&lt;strong>Democracy depends upon an informed population&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>The city of Philadelphia has committed to releasing 311, GIS and crime data. There was a very lively discussion at this session around the types of apps we could build, the benefits that the city will reap and most importantly &lt;em>WHEN&lt;/em> it will launch.&lt;/p>
&lt;p>This was all good and exciting conversation and one particular thread stuck with me long after the session ended.  We talked about how we can audit the data and ensure that it is used properly and not abused.&lt;/p>
&lt;p>We live in an age when a &lt;a href="http://blog.compete.com/2007/02/16/colbert-report-wikipedia/">comedian can save the elephants&lt;/a> by editing a wiki page.  When I was a kid I was raised to believe that reporters were 'investigative journalists' and dug deep to get the facts.  I grew up just a few miles from where Geraldo Rivera got his start with an acclaimed expose of a &lt;a href="http://en.wikipedia.org/wiki/Willowbrook_State_School#More_scandals_and_abuses">mental institution&lt;/a> that resulted in action being taken.  I was not until I got older and became exposed to Fox and the Daily show that I'd realized how seemingly sane people could look at the same data information and draw such dramatically different conclusions.  (Actually I learned that in grad school.  &amp;quot;Number-smithing&amp;quot; and &amp;quot;creative graphing&amp;quot; are required classes for practicing engineers.  There was a similar class for the business students, but it skipped the numbers part altogether.)&lt;/p>
&lt;p>It would be really easy for me to take all the pothole data and plot it on google maps.  A little massaging could show my street as having a few extra's and maybe I'll even 'fix' a few in the other neighborhoods.  People will see my app and maybe my street gets a little bump in priority.&lt;/p>
&lt;p>Visualization is a powerful tool and data of this magnitude will always be analyzed with bias.  Even a &lt;a href="http://radar.oreilly.com/2010/08/visualization-as-journalism.html">simple flow chart describing the new health care policy&lt;/a> can be warped towards an agenda.&lt;/p>
&lt;p>Opendata puts us all on a level playing field.  I'm looking forward to the apps and visualizations coming out.  I will be disappointed if we wind up with a  liberal and a conservative app mirroring our polarized two party system.  I personally feel that there is a responsibility in the hands of the designers and developers to attack this data and ensure that the people of Philadelphia have multiple avenues of getting accurate facts.&lt;/p>
&lt;p>The first tenant of the &lt;a href="http://www.ieee.org/membership_services/membership/ethics_code.html">IEEE code of ethics&lt;/a> hints at the damage we can do here.&lt;/p>
&lt;blockquote>
&lt;p>1. to accept responsibility in making decisions consistent with the safety, health and welfare of the public, and to disclose promptly factors that might endanger the public or the environment;&lt;/p>
&lt;/blockquote>
&lt;p>As far back as the 12th century the Rabbi Maimonides wrote a Physicians oath with another line that I find appropriate:&lt;/p>
&lt;blockquote>
&lt;p>May the love for my art actuate me at all time; may neither avarice nor miserliness, nor thirst for glory or for a great reputation engage my mind; for the enemies of truth and philanthropy could easily deceive me and make me forgetful of my lofty aim of doing good&lt;/p>
&lt;/blockquote>
&lt;p>A Doctor's specialized knowledge and training puts his actions and opinions under a special light with regard to ethics.  Typically computer professionals live by a 'do no harm' credo as well, but our actions were usually bounded by our working domain.  With open data and blogs we can now use our skills and training for the betterment of democracy or as a lever to move a personal agenda.&lt;/p>
&lt;p>Now that I am ready to wield this data in the name of Democracy and Truthiness I'm headed over to listen to &lt;a href="http://twitter.com/tomjanofsky">Tom Janofsky&lt;/a> talk about his experiences with Cloud Computing on EC2.&lt;/p>
&lt;p>After all, once this great Philly data is out I'm going to need that elastic processing power....&lt;/p></description></item><item><title>BarCampPhilly part 2</title><link>https://www.aaronheld.com/post/barcampphilly-part-2/</link><pubDate>Fri, 14 Nov 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/barcampphilly-part-2/</guid><description>
&lt;p>&lt;a href="http://www.arpitonline.com">Arpit&lt;/a> led another session about how and when to use Flash in an Ajax world. One of the attendees was a Microsoft Silverlight manager and was a solid hour of dispelling myths about RIA in general. There is still a large population that thinks Flash/Silverlight are bad for SEO and not enough people know of Adobe's recent collaborations with Google and Microsoft, including project Ichabod that makes Flash more indexable than Ajax (some details here: &lt;a href="http://www.readwriteweb.com/archives/adobe">http://www.readwriteweb.com/archives/adobe&lt;/a>_ichabod_flash_ajax.php). We also talked about how the RIA vs traditional html choice is often made unconsciously before the IA/Design phase and what we need to do in order to help inform that choice. Arpit is going to have a conversation later with a manager from Microsoft concerning Rich Internet Application development in Philadelphia.&lt;/p>
&lt;p>Kevin Fitzpatrick led an afternoon session about &amp;quot;Getting your Ideas Out&amp;quot; that was standing room only by the time the session began. Kevin's premise was simple: You have more to worry from your idea never seeing the light of day than from it being stolen and used by someone else. He encouraged the attendees to put their ideas out as soon as they could and leverage the community to shape it to its final form. While the session was limited to an hour, the excitement in the room could have easily kept the discussion going for hours.&lt;/p>
&lt;p>One of the most interesting part of the event was the repeated references to Frank Eliason and the comcastcares twitter account. In a more that a couple of talks, comcastcares was used as an example on how big companies are now &amp;quot;getting it&amp;quot;, on how Frank's help to one of the attendees has now made her a loyal comcast customer as well as one discussion on how someone on Verizon FIOS was annoyed that they did not have a verizoncares twitter account. One of the attendees then pinged Frank on Twitter and he actually dropped in in person (though none of the CIM team managed to meet him since all this happened with no CIM member around). comcastcares was the biggest discussion topic on the ROI on Social Media talk as well.&lt;/p>
&lt;p>Other sessions we attended included how to get your organization to embrace web standards by Kimberly Blessing, a former AOL employee that led the first standards-compliant redesign of AOL.com back in 2004. Standards are a hot topic as we look for ways to reduce our engineering footprint and reuse our systems better. Standards lead the way for this.&lt;/p>
&lt;p>Our future plans are to keep this community rolling and we are now looking for a monthly venue. I have started talking to our internal HR about opening up a room (perhaps Comcast University) on a regular basis for this group. I'm looking forward to keeping the energy of this event going.&lt;/p></description></item><item><title>BarCampPhilly was a success!!</title><link>https://www.aaronheld.com/post/barcampphilly-was-a-success/</link><pubDate>Sun, 09 Nov 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/barcampphilly-was-a-success/</guid><description>
&lt;p>The &lt;a href="http://www.barcampphilly.org/" title="Bar Camp Philly">BarCamp&lt;/a> happened yesterday and Philly's brightest and most enthusiastic 'interative media' professionals came out in force.  Barcamp is a type of grass roots conference setup by the people bottom up rather then by a company top down.&lt;/p>
&lt;p>I talked a lot, learned a lot, drank a lot and made some friends in the process.&lt;/p>
&lt;p>Each session exceeded my expectations in different ways.  My talk on the how we build and operate &lt;a href="http://www.comcast.net">http://www.comcast.net&lt;/a> was very well received and it was very telling to step up from the weeds and view this creation with my peers.  As much as we need to move forward sometimes we at CIM forget how far we have come.  Since this was an untelevised, ego and marketecture free event we openly discussed what we did right and wrong. Having this talk with people that live through this grind every day is very different then having it with people that learned the 'right way to build websites' from books or blogs.&lt;/p>
&lt;blockquote>
&lt;p>&amp;quot;Don't hire legacy developers, kill legacy systems&amp;quot;&lt;/p>
&lt;p>--My quote of the session&lt;/p>
&lt;p>You guys really work hard, Comcast should hire more developers.&lt;/p>
&lt;p>--Audience quote of the session&lt;/p>
&lt;/blockquote>
&lt;p>From there I went to a &amp;quot;Web Standards' talk given by someone that lived through it at AOL.  Given my challenges of getting standards adopted at Comcast this was also a great learning and sharing session. We discussed what needs to happen in our educational system and industry in order for Standards be become accepted as a core part of webdev and not a 'nice to have'.&lt;/p>
&lt;blockquote>
&lt;p>Who would hire a web developer that does not follow standards?&lt;/p>
&lt;p>--Audience quote of the session&lt;/p>
&lt;/blockquote>
&lt;p>After a quick lunch attempt at a local Indian place (service in 45 min: FAIL) we returned for a talk about innovation.  My intent of this session was a he said / she said comedy routine with &lt;a href="http://arpitmathur.com/">Arpit&lt;/a> where he would play the role of the frustrated developer and I'd be more of the pointy haired boss keeping our hapless developers trudging towards a deadline.  Interesting enough this session redefined the term &amp;quot;Innovation&amp;quot; for me as the talk went in a completely different direction.  By the definition of my peers we have been innovative. Much of our innovation has not been customer facing so it does not fit with the typical management concept of what they expect to see with regard to innovation.&lt;/p>
&lt;p>A very interesting undercurrent was that most people innovate by padding their time or otherwise hiding this effort from their bosses.  I commented that I think this is disrespectful to the bosses and the responses again surprised me.  It turns out that most people feel that the top execs are very cluefull and 'get it' at many levels.  They also feel that the middle management just below them have no clue.  The other key factor in stifling innovation in large organizations is the inherent disrespect across disciplines. For some reason many people think that innovation has to come from their immediate team rather then the larger group.  (So for example the HTML devs have to innovate as opposed to the team consisting of HTML/IA/Design/Biz/QA etc..)&lt;/p>
&lt;p>The other great take home was that the entire crowd was supportive and we all wanted each other to succeed. I never experienced such a positive vibe about Comcast in Philly and how much the tech community was behind us to succeed.  There is nothing in the way of CIM (Comcast Interactive Media).  I do think that we finally have that 'critical mass' of community here in Philly and it is time that the East Coast become known as a center of innovation.  There is some great talent in this region, from us corp developers to the fierce independents at &lt;a href="http://www.indyhall.org/">Indy Hall&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&amp;quot;We are not the Comcast you know and hate, we are the Comcast you don't know and love&amp;quot;&lt;/p>
&lt;p>--Quote of the session&lt;/p>
&lt;/blockquote>
&lt;p>All this was less then half my day. Stay tuned for more!&lt;/p></description></item></channel></rss>