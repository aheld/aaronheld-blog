<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>django on Aaron's Blog</title><link>https://www.aaronheld.com/tags/django/</link><description>Recent content in django on Aaron's Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Tue, 22 Apr 2008 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aaronheld.com/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Rest as a boring servlet</title><link>https://www.aaronheld.com/post/rest-as-a-boring-servlet/</link><pubDate>Tue, 22 Apr 2008 00:00:00 +0000</pubDate><guid>https://www.aaronheld.com/post/rest-as-a-boring-servlet/</guid><description>
&lt;p>A coworker whipped up a generic REST interface for any Ruby on Rails activerecord (data model).  What he described (in 5 minutes) was a nice implementation.  I wanted see how the generic django REST interface was coded.&lt;/p>
&lt;p>&lt;a href="http://code.google.com/p/django-rest-interface/">http://code.google.com/p/django-rest-interface/&lt;/a>&lt;/p>
&lt;p>I was pleasantly surprised to realize that they Python developers simply used the normal form processing to handle rest and didn't invent a new paradigm.&lt;/p>
&lt;p>On an early project we tried to implement RESTlet for a java based REST application.  Under load we saw some strange problems and the code was reverted to normal servlets without too much pain.&lt;/p>
&lt;p>The beauty of REST is its simplicity, yet there is so much energy being expended to 'simplify' it.&lt;/p>
&lt;p>The real magic is to standardize on sending XML or JSON rather then url encoded data of an http form POST.&lt;/p></description></item></channel></rss>